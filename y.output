State 23 conflicts: 1 shift/reduce
State 47 conflicts: 1 reduce/reduce
State 50 conflicts: 1 shift/reduce
State 154 conflicts: 1 reduce/reduce


Grammar

    0 $accept: Code $end

    1 Code: headerfileInclude Program

    2 headerfileInclude: INCLUDE HEADERFILE headerfileInclude
    3                  | ε

    4 Program: func_list

    5 func_list: func_list func
    6          | ε

    7 $@1: ε

    8 func: func_prefix OF $@1 stmt_list CF

    9 $@2: ε

   10 func_prefix: func_data_type ID $@2 OC param_list CC

   11 func_data_type: data_type
   12               | VOID

   13 $@3: ε

   14 param_list: param $@3 COMMA param_list
   15           | param
   16           | ε

   17 param: data_type ID

   18 stmt_list: stmt stmt_list
   19          | ε

   20 stmt: declaration
   21     | assign SCOL
   22     | expr SCOL
   23     | return_stmt SCOL
   24     | if_stmt
   25     | while_loop_stmt
   26     | for_loop_stmt
   27     | BREAK SCOL
   28     | CONTINUE SCOL
   29     | switch_stmt
   30     | INPUT OC ID CC SCOL
   31     | INPUT OC ID OS expr CS CC SCOL
   32     | OUTPUT OC expr CC SCOL
   33     | OUTPUT OC STR CC SCOL
   34     | TYPEOF ID SCOL

   35 declaration: data_type ID SCOL
   36            | data_type ID ASSIGN FLEN OC STR CC SCOL
   37            | FLEN OC ID CC ASSIGN ID SCOL
   38            | data_type ID ASSIGN FLEN OC ID CC SCOL
   39            | STRING ID SCOL
   40            | STRING ID ASSIGN STR SCOL
   41            | STRING ID ASSIGN expr SCOL
   42            | data_type ID ASSIGN expr SCOL
   43            | data_type ID assign ID SCOL
   44            | data_type ID OS INT_NUM CS SCOL
   45            | data_type ID OS INT_NUM CS ASSIGN
   46            | data_type ID OS CHARACTER CS ASSIGN
   47            | OF arr_values CF SCOL

   48 $@4: ε

   49 arr_values: const $@4 COMMA arr_values
   50           | const

   51 $@5: ε

   52 arr_values: ID $@5 COMMA arr_values
   53           | ID

   54 return_stmt: RETURN expr
   55            | RETURN STR
   56            | ε

   57 data_type: INT
   58          | FLOAT
   59          | STRING
   60          | CHAR
   61          | BOOL

   62 expr: expr ADD expr
   63     | expr SUBTRACT expr
   64     | expr MULTIPLY expr
   65     | expr DIVIDE expr
   66     | expr LE expr
   67     | expr LE FLEN OC ID CC
   68     | expr GE expr
   69     | expr GE FLEN OC ID CC
   70     | expr LT expr
   71     | expr LT FLEN OC ID CC
   72     | expr GT expr
   73     | expr GT FLEN OC ID CC
   74     | expr EQ expr
   75     | expr EQ FLEN OC ID CC
   76     | expr NE FLEN OC ID CC
   77     | expr NE expr
   78     | expr AND expr
   79     | expr OR expr
   80     | expr MODULO expr
   81     | expr BITAND expr
   82     | expr BITOR expr
   83     | expr XOR expr
   84     | expr LEFTSHIFT expr
   85     | expr RIGHTSHIFT expr
   86     | unary_expr
   87     | primary_expr
   88     | postfix_expr
   89     | expr ADD ADD

   90 postfix_expr: func_call
   91             | ID OS expr CS

   92 unary_expr: unary_op primary_expr

   93 primary_expr: ID
   94             | const
   95             | OC expr CC

   96 unary_op: ADD
   97         | SUBTRACT
   98         | NOT
   99         | NEGATION

  100 const: INT_NUM
  101      | FLOAT_NUM
  102      | CHARACTER

  103 assign: ID ASSIGN expr
  104       | ID OS expr CS ASSIGN expr
  105       | expr
  106       | declaration

  107 $@6: ε

  108 $@7: ε

  109 $@8: ε

  110 $@9: ε

  111 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

  112 $@10: ε

  113 $@11: ε

  114 $@12: ε

  115 $@13: ε

  116 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt
  117          | ε

  118 $@14: ε

  119 else_stmt: ELSE OF $@14 stmt_list CF
  120          | ε

  121 $@15: ε

  122 $@16: ε

  123 $@17: ε

  124 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

  125 case_stmt_list: case_stmt case_stmt_list
  126               | ε

  127 $@18: ε

  128 $@19: ε

  129 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list

  130 default_stmt: DEFAULT COLON stmt_list
  131             | ε

  132 $@20: ε

  133 $@21: ε

  134 $@22: ε

  135 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF

  136 $@23: ε

  137 $@24: ε

  138 $@25: ε

  139 $@26: ε

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

  141 $@27: ε

  142 func_call: ID $@27 OC arg_list CC

  143 arg_list: arg COMMA arg_list
  144         | arg
  145         | ε

  146 arg: expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INCLUDE <node> (258) 2
    HEADERFILE <node> (259) 2
    INT <node> (260) 57
    CHAR <node> (261) 60
    FLOAT <node> (262) 58
    STRING <node> (263) 39 40 41 59
    BOOL <node> (264) 61
    VOID <node> (265) 12
    RETURN <node> (266) 54 55
    INT_NUM <node> (267) 44 45 100
    FLOAT_NUM <node> (268) 101
    ID <node> (269) 10 17 30 31 34 35 36 37 38 39 40 41 42 43 44 45 46 52 53 67 69 71 73 75 76 91 93 103 104 124 142
    LEFTSHIFT <node> (270) 84
    RIGHTSHIFT <node> (271) 85
    LE <node> (272) 66 67
    GE <node> (273) 68 69
    EQ <node> (274) 74 75
    NE <node> (275) 76 77
    GT <node> (276) 72 73
    LT <node> (277) 70 71
    AND <node> (278) 78
    OR <node> (279) 79
    NOT <node> (280) 98
    ADD <node> (281) 62 89 96
    SUBTRACT <node> (282) 63 97
    DIVIDE <node> (283) 65
    MULTIPLY <node> (284) 64
    MODULO <node> (285) 80
    BITAND <node> (286) 81
    BITOR <node> (287) 82
    NEGATION <node> (288) 99
    XOR <node> (289) 83
    STR <node> (290) 33 36 40 55
    CHARACTER <node> (291) 46 102
    CC <node> (292) 10 30 31 32 33 36 37 38 67 69 71 73 75 76 95 111 116 124 129 135 140 142
    OC <node> (293) 10 30 31 32 33 36 37 38 67 69 71 73 75 76 95 111 116 124 129 135 140 142
    CS <node> (294) 31 44 45 46 91 104
    OS <node> (295) 31 44 45 46 91 104
    CF <node> (296) 8 47 111 116 119 124 135 140
    OF <node> (297) 8 47 111 116 119 124 135 140
    COMMA <node> (298) 14 49 52 143
    COLON <node> (299) 129 130
    SCOL <node> (300) 21 22 23 27 28 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 47 140
    OUTPUT <node> (301) 32 33
    INPUT <node> (302) 30 31
    SWITCH <node> (303) 124
    CASE <node> (304) 129
    BREAK <node> (305) 27
    DEFAULT <node> (306) 130
    IF <node> (307) 111
    ELIF <node> (308) 116
    ELSE <node> (309) 119
    WHILE <node> (310) 135
    FOR <node> (311) 140
    CONTINUE <node> (312) 28
    TYPEOF <node> (313) 34
    FLEN <node> (314) 36 37 38 67 69 71 73 75 76
    ASSIGN (315) 36 37 38 40 41 42 45 46 103 104


Nonterminals, with rules where they appear

    $accept (61)
        on left: 0
    Code (62)
        on left: 1
        on right: 0
    headerfileInclude <node> (63)
        on left: 2 3
        on right: 1 2
    Program <node> (64)
        on left: 4
        on right: 1
    func_list <node> (65)
        on left: 5 6
        on right: 4 5
    func <node> (66)
        on left: 8
        on right: 5
    $@1 (67)
        on left: 7
        on right: 8
    func_prefix <node> (68)
        on left: 10
        on right: 8
    $@2 (69)
        on left: 9
        on right: 10
    func_data_type <node> (70)
        on left: 11 12
        on right: 10
    param_list <node> (71)
        on left: 14 15 16
        on right: 10 14
    $@3 (72)
        on left: 13
        on right: 14
    param <node> (73)
        on left: 17
        on right: 14 15
    stmt_list <node> (74)
        on left: 18 19
        on right: 8 18 111 116 119 129 130 135 140
    stmt <node> (75)
        on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
        on right: 18
    declaration <node> (76)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47
        on right: 20 106
    arr_values (77)
        on left: 49 50 52 53
        on right: 47 49 52
    $@4 (78)
        on left: 48
        on right: 49
    $@5 (79)
        on left: 51
        on right: 52
    return_stmt <node> (80)
        on left: 54 55 56
        on right: 23
    data_type <node> (81)
        on left: 57 58 59 60 61
        on right: 11 17 35 36 38 42 43 44 45 46
    expr <node> (82)
        on left: 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89
        on right: 22 31 32 41 42 54 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 89 91 95 103 104 105 111 116 135 140 146
    postfix_expr <node> (83)
        on left: 90 91
        on right: 88
    unary_expr <node> (84)
        on left: 92
        on right: 86
    primary_expr <node> (85)
        on left: 93 94 95
        on right: 87 92
    unary_op <node> (86)
        on left: 96 97 98 99
        on right: 92
    const <node> (87)
        on left: 100 101 102
        on right: 49 50 94 129
    assign <node> (88)
        on left: 103 104 105 106
        on right: 21 43 140
    if_stmt <node> (89)
        on left: 111
        on right: 24
    $@6 (90)
        on left: 107
        on right: 111
    $@7 (91)
        on left: 108
        on right: 111
    $@8 (92)
        on left: 109
        on right: 111
    $@9 (93)
        on left: 110
        on right: 111
    elif_stmt <node> (94)
        on left: 116 117
        on right: 111 116
    $@10 (95)
        on left: 112
        on right: 116
    $@11 (96)
        on left: 113
        on right: 116
    $@12 (97)
        on left: 114
        on right: 116
    $@13 (98)
        on left: 115
        on right: 116
    else_stmt <node> (99)
        on left: 119 120
        on right: 111
    $@14 (100)
        on left: 118
        on right: 119
    switch_stmt <node> (101)
        on left: 124
        on right: 29
    $@15 (102)
        on left: 121
        on right: 124
    $@16 (103)
        on left: 122
        on right: 124
    $@17 (104)
        on left: 123
        on right: 124
    case_stmt_list <node> (105)
        on left: 125 126
        on right: 124 125
    case_stmt <node> (106)
        on left: 129
        on right: 125
    $@18 (107)
        on left: 127
        on right: 129
    $@19 (108)
        on left: 128
        on right: 129
    default_stmt (109)
        on left: 130 131
        on right: 124
    while_loop_stmt <node> (110)
        on left: 135
        on right: 25
    $@20 (111)
        on left: 132
        on right: 135
    $@21 (112)
        on left: 133
        on right: 135
    $@22 (113)
        on left: 134
        on right: 135
    for_loop_stmt <node> (114)
        on left: 140
        on right: 26
    $@23 (115)
        on left: 136
        on right: 140
    $@24 (116)
        on left: 137
        on right: 140
    $@25 (117)
        on left: 138
        on right: 140
    $@26 (118)
        on left: 139
        on right: 140
    func_call <node> (119)
        on left: 142
        on right: 90
    $@27 (120)
        on left: 141
        on right: 142
    arg_list <node> (121)
        on left: 143 144 145
        on right: 142 143
    arg <node> (122)
        on left: 146
        on right: 143 144


State 0

    0 $accept: • Code $end

    INCLUDE  shift, and go to state 1

    $default  reduce using rule 3 (headerfileInclude)

    Code               go to state 2
    headerfileInclude  go to state 3


State 1

    2 headerfileInclude: INCLUDE • HEADERFILE headerfileInclude

    HEADERFILE  shift, and go to state 4


State 2

    0 $accept: Code • $end

    $end  shift, and go to state 5


State 3

    1 Code: headerfileInclude • Program

    $default  reduce using rule 6 (func_list)

    Program    go to state 6
    func_list  go to state 7


State 4

    2 headerfileInclude: INCLUDE HEADERFILE • headerfileInclude

    INCLUDE  shift, and go to state 1

    $default  reduce using rule 3 (headerfileInclude)

    headerfileInclude  go to state 8


State 5

    0 $accept: Code $end •

    $default  accept


State 6

    1 Code: headerfileInclude Program •

    $default  reduce using rule 1 (Code)


State 7

    4 Program: func_list •
    5 func_list: func_list • func

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13
    VOID    shift, and go to state 14

    $default  reduce using rule 4 (Program)

    func            go to state 15
    func_prefix     go to state 16
    func_data_type  go to state 17
    data_type       go to state 18


State 8

    2 headerfileInclude: INCLUDE HEADERFILE headerfileInclude •

    $default  reduce using rule 2 (headerfileInclude)


State 9

   57 data_type: INT •

    $default  reduce using rule 57 (data_type)


State 10

   60 data_type: CHAR •

    $default  reduce using rule 60 (data_type)


State 11

   58 data_type: FLOAT •

    $default  reduce using rule 58 (data_type)


State 12

   59 data_type: STRING •

    $default  reduce using rule 59 (data_type)


State 13

   61 data_type: BOOL •

    $default  reduce using rule 61 (data_type)


State 14

   12 func_data_type: VOID •

    $default  reduce using rule 12 (func_data_type)


State 15

    5 func_list: func_list func •

    $default  reduce using rule 5 (func_list)


State 16

    8 func: func_prefix • OF $@1 stmt_list CF

    OF  shift, and go to state 19


State 17

   10 func_prefix: func_data_type • ID $@2 OC param_list CC

    ID  shift, and go to state 20


State 18

   11 func_data_type: data_type •

    $default  reduce using rule 11 (func_data_type)


State 19

    8 func: func_prefix OF • $@1 stmt_list CF

    $default  reduce using rule 7 ($@1)

    $@1  go to state 21


State 20

   10 func_prefix: func_data_type ID • $@2 OC param_list CC

    $default  reduce using rule 9 ($@2)

    $@2  go to state 22


State 21

    8 func: func_prefix OF $@1 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 45
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 22

   10 func_prefix: func_data_type ID $@2 • OC param_list CC

    OC  shift, and go to state 62


State 23

   39 declaration: STRING • ID SCOL
   40            | STRING • ID ASSIGN STR SCOL
   41            | STRING • ID ASSIGN expr SCOL
   59 data_type: STRING •

    ID  shift, and go to state 63

    ID  [reduce using rule 59 (data_type)]


State 24

   54 return_stmt: RETURN • expr
   55            | RETURN • STR

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 65
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 66
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 25

  100 const: INT_NUM •

    $default  reduce using rule 100 (const)


State 26

  101 const: FLOAT_NUM •

    $default  reduce using rule 101 (const)


State 27

   91 postfix_expr: ID • OS expr CS
   93 primary_expr: ID •
  103 assign: ID • ASSIGN expr
  104       | ID • OS expr CS ASSIGN expr
  142 func_call: ID • $@27 OC arg_list CC

    OS      shift, and go to state 67
    ASSIGN  shift, and go to state 68

    OC        reduce using rule 141 ($@27)
    $default  reduce using rule 93 (primary_expr)

    $@27  go to state 69


State 28

   98 unary_op: NOT •

    $default  reduce using rule 98 (unary_op)


State 29

   96 unary_op: ADD •

    $default  reduce using rule 96 (unary_op)


State 30

   97 unary_op: SUBTRACT •

    $default  reduce using rule 97 (unary_op)


State 31

   99 unary_op: NEGATION •

    $default  reduce using rule 99 (unary_op)


State 32

  102 const: CHARACTER •

    $default  reduce using rule 102 (const)


State 33

   95 primary_expr: OC • expr CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 70
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 34

   47 declaration: OF • arr_values CF SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 71
    CHARACTER  shift, and go to state 32

    arr_values  go to state 72
    const       go to state 73


State 35

   32 stmt: OUTPUT • OC expr CC SCOL
   33     | OUTPUT • OC STR CC SCOL

    OC  shift, and go to state 74


State 36

   30 stmt: INPUT • OC ID CC SCOL
   31     | INPUT • OC ID OS expr CS CC SCOL

    OC  shift, and go to state 75


State 37

  124 switch_stmt: SWITCH • $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 121 ($@15)

    $@15  go to state 76


State 38

   27 stmt: BREAK • SCOL

    SCOL  shift, and go to state 77


State 39

  111 if_stmt: IF • $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 107 ($@6)

    $@6  go to state 78


State 40

  135 while_loop_stmt: WHILE • $@20 OC expr CC $@21 OF $@22 stmt_list CF

    $default  reduce using rule 132 ($@20)

    $@20  go to state 79


State 41

  140 for_loop_stmt: FOR • OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    OC  shift, and go to state 80


State 42

   28 stmt: CONTINUE • SCOL

    SCOL  shift, and go to state 81


State 43

   34 stmt: TYPEOF • ID SCOL

    ID  shift, and go to state 82


State 44

   37 declaration: FLEN • OC ID CC ASSIGN ID SCOL

    OC  shift, and go to state 83


State 45

    8 func: func_prefix OF $@1 stmt_list • CF

    CF  shift, and go to state 84


State 46

   18 stmt_list: stmt • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 85
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 47

   20 stmt: declaration •
  106 assign: declaration •

    SCOL      reduce using rule 20 (stmt)
    SCOL      [reduce using rule 106 (assign)]
    $default  reduce using rule 20 (stmt)


State 48

   23 stmt: return_stmt • SCOL

    SCOL  shift, and go to state 86


State 49

   35 declaration: data_type • ID SCOL
   36            | data_type • ID ASSIGN FLEN OC STR CC SCOL
   38            | data_type • ID ASSIGN FLEN OC ID CC SCOL
   42            | data_type • ID ASSIGN expr SCOL
   43            | data_type • ID assign ID SCOL
   44            | data_type • ID OS INT_NUM CS SCOL
   45            | data_type • ID OS INT_NUM CS ASSIGN
   46            | data_type • ID OS CHARACTER CS ASSIGN

    ID  shift, and go to state 87


State 50

   22 stmt: expr • SCOL
   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  105 assign: expr •

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    SCOL        shift, and go to state 106

    SCOL  [reduce using rule 105 (assign)]


State 51

   88 expr: postfix_expr •

    $default  reduce using rule 88 (expr)


State 52

   86 expr: unary_expr •

    $default  reduce using rule 86 (expr)


State 53

   87 expr: primary_expr •

    $default  reduce using rule 87 (expr)


State 54

   92 unary_expr: unary_op • primary_expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 107
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    primary_expr  go to state 108
    const         go to state 55


State 55

   94 primary_expr: const •

    $default  reduce using rule 94 (primary_expr)


State 56

   21 stmt: assign • SCOL

    SCOL  shift, and go to state 109


State 57

   24 stmt: if_stmt •

    $default  reduce using rule 24 (stmt)


State 58

   29 stmt: switch_stmt •

    $default  reduce using rule 29 (stmt)


State 59

   25 stmt: while_loop_stmt •

    $default  reduce using rule 25 (stmt)


State 60

   26 stmt: for_loop_stmt •

    $default  reduce using rule 26 (stmt)


State 61

   90 postfix_expr: func_call •

    $default  reduce using rule 90 (postfix_expr)


State 62

   10 func_prefix: func_data_type ID $@2 OC • param_list CC

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    $default  reduce using rule 16 (param_list)

    param_list  go to state 110
    param       go to state 111
    data_type   go to state 112


State 63

   39 declaration: STRING ID • SCOL
   40            | STRING ID • ASSIGN STR SCOL
   41            | STRING ID • ASSIGN expr SCOL

    SCOL    shift, and go to state 113
    ASSIGN  shift, and go to state 114


State 64

   91 postfix_expr: ID • OS expr CS
   93 primary_expr: ID •
  142 func_call: ID • $@27 OC arg_list CC

    OS  shift, and go to state 115

    OC        reduce using rule 141 ($@27)
    $default  reduce using rule 93 (primary_expr)

    $@27  go to state 69


State 65

   55 return_stmt: RETURN STR •

    $default  reduce using rule 55 (return_stmt)


State 66

   54 return_stmt: RETURN expr •
   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105

    $default  reduce using rule 54 (return_stmt)


State 67

   91 postfix_expr: ID OS • expr CS
  104 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 116
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 68

  103 assign: ID ASSIGN • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 117
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 69

  142 func_call: ID $@27 • OC arg_list CC

    OC  shift, and go to state 118


State 70

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
   95 primary_expr: OC expr • CC

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    CC          shift, and go to state 119


State 71

   52 arr_values: ID • $@5 COMMA arr_values
   53           | ID •

    CF        reduce using rule 53 (arr_values)
    $default  reduce using rule 51 ($@5)

    $@5  go to state 120


State 72

   47 declaration: OF arr_values • CF SCOL

    CF  shift, and go to state 121


State 73

   49 arr_values: const • $@4 COMMA arr_values
   50           | const •

    CF        reduce using rule 50 (arr_values)
    $default  reduce using rule 48 ($@4)

    $@4  go to state 122


State 74

   32 stmt: OUTPUT OC • expr CC SCOL
   33     | OUTPUT OC • STR CC SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 123
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 124
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 75

   30 stmt: INPUT OC • ID CC SCOL
   31     | INPUT OC • ID OS expr CS CC SCOL

    ID  shift, and go to state 125


State 76

  124 switch_stmt: SWITCH $@15 • OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    OC  shift, and go to state 126


State 77

   27 stmt: BREAK SCOL •

    $default  reduce using rule 27 (stmt)


State 78

  111 if_stmt: IF $@6 • OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OC  shift, and go to state 127


State 79

  135 while_loop_stmt: WHILE $@20 • OC expr CC $@21 OF $@22 stmt_list CF

    OC  shift, and go to state 128


State 80

  140 for_loop_stmt: FOR OC • assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    FLEN       shift, and go to state 44

    declaration   go to state 129
    data_type     go to state 49
    expr          go to state 130
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    assign        go to state 131
    func_call     go to state 61


State 81

   28 stmt: CONTINUE SCOL •

    $default  reduce using rule 28 (stmt)


State 82

   34 stmt: TYPEOF ID • SCOL

    SCOL  shift, and go to state 132


State 83

   37 declaration: FLEN OC • ID CC ASSIGN ID SCOL

    ID  shift, and go to state 133


State 84

    8 func: func_prefix OF $@1 stmt_list CF •

    $default  reduce using rule 8 (func)


State 85

   18 stmt_list: stmt stmt_list •

    $default  reduce using rule 18 (stmt_list)


State 86

   23 stmt: return_stmt SCOL •

    $default  reduce using rule 23 (stmt)


State 87

   35 declaration: data_type ID • SCOL
   36            | data_type ID • ASSIGN FLEN OC STR CC SCOL
   38            | data_type ID • ASSIGN FLEN OC ID CC SCOL
   42            | data_type ID • ASSIGN expr SCOL
   43            | data_type ID • assign ID SCOL
   44            | data_type ID • OS INT_NUM CS SCOL
   45            | data_type ID • OS INT_NUM CS ASSIGN
   46            | data_type ID • OS CHARACTER CS ASSIGN

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OS         shift, and go to state 134
    OF         shift, and go to state 34
    SCOL       shift, and go to state 135
    FLEN       shift, and go to state 44
    ASSIGN     shift, and go to state 136

    declaration   go to state 129
    data_type     go to state 49
    expr          go to state 130
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    assign        go to state 137
    func_call     go to state 61


State 88

   84 expr: expr LEFTSHIFT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 138
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 89

   85 expr: expr RIGHTSHIFT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 139
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 90

   66 expr: expr LE • expr
   67     | expr LE • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 140

    expr          go to state 141
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 91

   68 expr: expr GE • expr
   69     | expr GE • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 142

    expr          go to state 143
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 92

   74 expr: expr EQ • expr
   75     | expr EQ • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 144

    expr          go to state 145
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 93

   76 expr: expr NE • FLEN OC ID CC
   77     | expr NE • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 146

    expr          go to state 147
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 94

   72 expr: expr GT • expr
   73     | expr GT • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 148

    expr          go to state 149
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 95

   70 expr: expr LT • expr
   71     | expr LT • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 150

    expr          go to state 151
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 96

   78 expr: expr AND • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 152
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 97

   79 expr: expr OR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 153
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 98

   62 expr: expr ADD • expr
   89     | expr ADD • ADD

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 154
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 155
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 99

   63 expr: expr SUBTRACT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 156
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 100

   65 expr: expr DIVIDE • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 157
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 101

   64 expr: expr MULTIPLY • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 158
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 102

   80 expr: expr MODULO • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 159
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 103

   81 expr: expr BITAND • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 160
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 104

   82 expr: expr BITOR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 161
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 105

   83 expr: expr XOR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 162
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 106

   22 stmt: expr SCOL •

    $default  reduce using rule 22 (stmt)


State 107

   93 primary_expr: ID •

    $default  reduce using rule 93 (primary_expr)


State 108

   92 unary_expr: unary_op primary_expr •

    $default  reduce using rule 92 (unary_expr)


State 109

   21 stmt: assign SCOL •

    $default  reduce using rule 21 (stmt)


State 110

   10 func_prefix: func_data_type ID $@2 OC param_list • CC

    CC  shift, and go to state 163


State 111

   14 param_list: param • $@3 COMMA param_list
   15           | param •

    CC        reduce using rule 15 (param_list)
    $default  reduce using rule 13 ($@3)

    $@3  go to state 164


State 112

   17 param: data_type • ID

    ID  shift, and go to state 165


State 113

   39 declaration: STRING ID SCOL •

    $default  reduce using rule 39 (declaration)


State 114

   40 declaration: STRING ID ASSIGN • STR SCOL
   41            | STRING ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 166
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 167
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 115

   91 postfix_expr: ID OS • expr CS

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 168
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 116

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
   91 postfix_expr: ID OS expr • CS
  104 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    CS          shift, and go to state 169


State 117

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  103 assign: ID ASSIGN expr •

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105

    $default  reduce using rule 103 (assign)


State 118

  142 func_call: ID $@27 OC • arg_list CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    $default  reduce using rule 145 (arg_list)

    expr          go to state 170
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61
    arg_list      go to state 171
    arg           go to state 172


State 119

   95 primary_expr: OC expr CC •

    $default  reduce using rule 95 (primary_expr)


State 120

   52 arr_values: ID $@5 • COMMA arr_values

    COMMA  shift, and go to state 173


State 121

   47 declaration: OF arr_values CF • SCOL

    SCOL  shift, and go to state 174


State 122

   49 arr_values: const $@4 • COMMA arr_values

    COMMA  shift, and go to state 175


State 123

   33 stmt: OUTPUT OC STR • CC SCOL

    CC  shift, and go to state 176


State 124

   32 stmt: OUTPUT OC expr • CC SCOL
   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    CC          shift, and go to state 177


State 125

   30 stmt: INPUT OC ID • CC SCOL
   31     | INPUT OC ID • OS expr CS CC SCOL

    CC  shift, and go to state 178
    OS  shift, and go to state 179


State 126

  124 switch_stmt: SWITCH $@15 OC • ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    ID  shift, and go to state 180


State 127

  111 if_stmt: IF $@6 OC • expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 181
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 128

  135 while_loop_stmt: WHILE $@20 OC • expr CC $@21 OF $@22 stmt_list CF

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 182
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 129

  106 assign: declaration •

    $default  reduce using rule 106 (assign)


State 130

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  105 assign: expr •

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105

    $default  reduce using rule 105 (assign)


State 131

  140 for_loop_stmt: FOR OC assign • SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    SCOL  shift, and go to state 183


State 132

   34 stmt: TYPEOF ID SCOL •

    $default  reduce using rule 34 (stmt)


State 133

   37 declaration: FLEN OC ID • CC ASSIGN ID SCOL

    CC  shift, and go to state 184


State 134

   44 declaration: data_type ID OS • INT_NUM CS SCOL
   45            | data_type ID OS • INT_NUM CS ASSIGN
   46            | data_type ID OS • CHARACTER CS ASSIGN

    INT_NUM    shift, and go to state 185
    CHARACTER  shift, and go to state 186


State 135

   35 declaration: data_type ID SCOL •

    $default  reduce using rule 35 (declaration)


State 136

   36 declaration: data_type ID ASSIGN • FLEN OC STR CC SCOL
   38            | data_type ID ASSIGN • FLEN OC ID CC SCOL
   42            | data_type ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 187

    expr          go to state 188
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 137

   43 declaration: data_type ID assign • ID SCOL

    ID  shift, and go to state 189


State 138

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   84     | expr LEFTSHIFT expr •
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    ADD       shift, and go to state 98
    SUBTRACT  shift, and go to state 99
    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    MODULO    shift, and go to state 102

    $default  reduce using rule 84 (expr)


State 139

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   85     | expr RIGHTSHIFT expr •
   89     | expr • ADD ADD

    ADD       shift, and go to state 98
    SUBTRACT  shift, and go to state 99
    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    MODULO    shift, and go to state 102

    $default  reduce using rule 85 (expr)


State 140

   67 expr: expr LE FLEN • OC ID CC

    OC  shift, and go to state 190


State 141

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   66     | expr LE expr •
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102

    $default  reduce using rule 66 (expr)


State 142

   69 expr: expr GE FLEN • OC ID CC

    OC  shift, and go to state 191


State 143

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   68     | expr GE expr •
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102

    $default  reduce using rule 68 (expr)


State 144

   75 expr: expr EQ FLEN • OC ID CC

    OC  shift, and go to state 192


State 145

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   74     | expr EQ expr •
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102

    $default  reduce using rule 74 (expr)


State 146

   76 expr: expr NE FLEN • OC ID CC

    OC  shift, and go to state 193


State 147

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   77     | expr NE expr •
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102

    $default  reduce using rule 77 (expr)


State 148

   73 expr: expr GT FLEN • OC ID CC

    OC  shift, and go to state 194


State 149

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   72     | expr GT expr •
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102

    $default  reduce using rule 72 (expr)


State 150

   71 expr: expr LT FLEN • OC ID CC

    OC  shift, and go to state 195


State 151

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   70     | expr LT expr •
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102

    $default  reduce using rule 70 (expr)


State 152

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   78     | expr AND expr •
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105

    $default  reduce using rule 78 (expr)


State 153

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   79     | expr OR expr •
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105

    $default  reduce using rule 79 (expr)


State 154

   89 expr: expr ADD ADD •
   96 unary_op: ADD •

    INT_NUM    reduce using rule 96 (unary_op)
    FLOAT_NUM  reduce using rule 96 (unary_op)
    ID         reduce using rule 89 (expr)
    ID         [reduce using rule 96 (unary_op)]
    CHARACTER  reduce using rule 96 (unary_op)
    OC         reduce using rule 96 (unary_op)
    $default   reduce using rule 89 (expr)


State 155

   62 expr: expr • ADD expr
   62     | expr ADD expr •
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    MODULO    shift, and go to state 102

    $default  reduce using rule 62 (expr)


State 156

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   63     | expr SUBTRACT expr •
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    MODULO    shift, and go to state 102

    $default  reduce using rule 63 (expr)


State 157

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   65     | expr DIVIDE expr •
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    $default  reduce using rule 65 (expr)


State 158

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   64     | expr MULTIPLY expr •
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    $default  reduce using rule 64 (expr)


State 159

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   80     | expr MODULO expr •
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    $default  reduce using rule 80 (expr)


State 160

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   81     | expr BITAND expr •
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102

    $default  reduce using rule 81 (expr)


State 161

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   82     | expr BITOR expr •
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    XOR         shift, and go to state 105

    $default  reduce using rule 82 (expr)


State 162

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   83     | expr XOR expr •
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103

    $default  reduce using rule 83 (expr)


State 163

   10 func_prefix: func_data_type ID $@2 OC param_list CC •

    $default  reduce using rule 10 (func_prefix)


State 164

   14 param_list: param $@3 • COMMA param_list

    COMMA  shift, and go to state 196


State 165

   17 param: data_type ID •

    $default  reduce using rule 17 (param)


State 166

   40 declaration: STRING ID ASSIGN STR • SCOL

    SCOL  shift, and go to state 197


State 167

   41 declaration: STRING ID ASSIGN expr • SCOL
   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    SCOL        shift, and go to state 198


State 168

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
   91 postfix_expr: ID OS expr • CS

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    CS          shift, and go to state 199


State 169

   91 postfix_expr: ID OS expr CS •
  104 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 200

    $default  reduce using rule 91 (postfix_expr)


State 170

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  146 arg: expr •

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105

    $default  reduce using rule 146 (arg)


State 171

  142 func_call: ID $@27 OC arg_list • CC

    CC  shift, and go to state 201


State 172

  143 arg_list: arg • COMMA arg_list
  144         | arg •

    COMMA  shift, and go to state 202

    $default  reduce using rule 144 (arg_list)


State 173

   52 arr_values: ID $@5 COMMA • arr_values

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 71
    CHARACTER  shift, and go to state 32

    arr_values  go to state 203
    const       go to state 73


State 174

   47 declaration: OF arr_values CF SCOL •

    $default  reduce using rule 47 (declaration)


State 175

   49 arr_values: const $@4 COMMA • arr_values

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 71
    CHARACTER  shift, and go to state 32

    arr_values  go to state 204
    const       go to state 73


State 176

   33 stmt: OUTPUT OC STR CC • SCOL

    SCOL  shift, and go to state 205


State 177

   32 stmt: OUTPUT OC expr CC • SCOL

    SCOL  shift, and go to state 206


State 178

   30 stmt: INPUT OC ID CC • SCOL

    SCOL  shift, and go to state 207


State 179

   31 stmt: INPUT OC ID OS • expr CS CC SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 208
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 180

  124 switch_stmt: SWITCH $@15 OC ID • $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 122 ($@16)

    $@16  go to state 209


State 181

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  111 if_stmt: IF $@6 OC expr • CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    CC          shift, and go to state 210


State 182

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  135 while_loop_stmt: WHILE $@20 OC expr • CC $@21 OF $@22 stmt_list CF

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    CC          shift, and go to state 211


State 183

  140 for_loop_stmt: FOR OC assign SCOL • $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 136 ($@23)

    $@23  go to state 212


State 184

   37 declaration: FLEN OC ID CC • ASSIGN ID SCOL

    ASSIGN  shift, and go to state 213


State 185

   44 declaration: data_type ID OS INT_NUM • CS SCOL
   45            | data_type ID OS INT_NUM • CS ASSIGN

    CS  shift, and go to state 214


State 186

   46 declaration: data_type ID OS CHARACTER • CS ASSIGN

    CS  shift, and go to state 215


State 187

   36 declaration: data_type ID ASSIGN FLEN • OC STR CC SCOL
   38            | data_type ID ASSIGN FLEN • OC ID CC SCOL

    OC  shift, and go to state 216


State 188

   42 declaration: data_type ID ASSIGN expr • SCOL
   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    SCOL        shift, and go to state 217


State 189

   43 declaration: data_type ID assign ID • SCOL

    SCOL  shift, and go to state 218


State 190

   67 expr: expr LE FLEN OC • ID CC

    ID  shift, and go to state 219


State 191

   69 expr: expr GE FLEN OC • ID CC

    ID  shift, and go to state 220


State 192

   75 expr: expr EQ FLEN OC • ID CC

    ID  shift, and go to state 221


State 193

   76 expr: expr NE FLEN OC • ID CC

    ID  shift, and go to state 222


State 194

   73 expr: expr GT FLEN OC • ID CC

    ID  shift, and go to state 223


State 195

   71 expr: expr LT FLEN OC • ID CC

    ID  shift, and go to state 224


State 196

   14 param_list: param $@3 COMMA • param_list

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    $default  reduce using rule 16 (param_list)

    param_list  go to state 225
    param       go to state 111
    data_type   go to state 112


State 197

   40 declaration: STRING ID ASSIGN STR SCOL •

    $default  reduce using rule 40 (declaration)


State 198

   41 declaration: STRING ID ASSIGN expr SCOL •

    $default  reduce using rule 41 (declaration)


State 199

   91 postfix_expr: ID OS expr CS •

    $default  reduce using rule 91 (postfix_expr)


State 200

  104 assign: ID OS expr CS ASSIGN • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 226
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 201

  142 func_call: ID $@27 OC arg_list CC •

    $default  reduce using rule 142 (func_call)


State 202

  143 arg_list: arg COMMA • arg_list

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    $default  reduce using rule 145 (arg_list)

    expr          go to state 170
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61
    arg_list      go to state 227
    arg           go to state 172


State 203

   52 arr_values: ID $@5 COMMA arr_values •

    $default  reduce using rule 52 (arr_values)


State 204

   49 arr_values: const $@4 COMMA arr_values •

    $default  reduce using rule 49 (arr_values)


State 205

   33 stmt: OUTPUT OC STR CC SCOL •

    $default  reduce using rule 33 (stmt)


State 206

   32 stmt: OUTPUT OC expr CC SCOL •

    $default  reduce using rule 32 (stmt)


State 207

   30 stmt: INPUT OC ID CC SCOL •

    $default  reduce using rule 30 (stmt)


State 208

   31 stmt: INPUT OC ID OS expr • CS CC SCOL
   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    CS          shift, and go to state 228


State 209

  124 switch_stmt: SWITCH $@15 OC ID $@16 • CC OF case_stmt_list $@17 default_stmt CF

    CC  shift, and go to state 229


State 210

  111 if_stmt: IF $@6 OC expr CC • $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 108 ($@7)

    $@7  go to state 230


State 211

  135 while_loop_stmt: WHILE $@20 OC expr CC • $@21 OF $@22 stmt_list CF

    $default  reduce using rule 133 ($@21)

    $@21  go to state 231


State 212

  140 for_loop_stmt: FOR OC assign SCOL $@23 • expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 232
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 213

   37 declaration: FLEN OC ID CC ASSIGN • ID SCOL

    ID  shift, and go to state 233


State 214

   44 declaration: data_type ID OS INT_NUM CS • SCOL
   45            | data_type ID OS INT_NUM CS • ASSIGN

    SCOL    shift, and go to state 234
    ASSIGN  shift, and go to state 235


State 215

   46 declaration: data_type ID OS CHARACTER CS • ASSIGN

    ASSIGN  shift, and go to state 236


State 216

   36 declaration: data_type ID ASSIGN FLEN OC • STR CC SCOL
   38            | data_type ID ASSIGN FLEN OC • ID CC SCOL

    ID   shift, and go to state 237
    STR  shift, and go to state 238


State 217

   42 declaration: data_type ID ASSIGN expr SCOL •

    $default  reduce using rule 42 (declaration)


State 218

   43 declaration: data_type ID assign ID SCOL •

    $default  reduce using rule 43 (declaration)


State 219

   67 expr: expr LE FLEN OC ID • CC

    CC  shift, and go to state 239


State 220

   69 expr: expr GE FLEN OC ID • CC

    CC  shift, and go to state 240


State 221

   75 expr: expr EQ FLEN OC ID • CC

    CC  shift, and go to state 241


State 222

   76 expr: expr NE FLEN OC ID • CC

    CC  shift, and go to state 242


State 223

   73 expr: expr GT FLEN OC ID • CC

    CC  shift, and go to state 243


State 224

   71 expr: expr LT FLEN OC ID • CC

    CC  shift, and go to state 244


State 225

   14 param_list: param $@3 COMMA param_list •

    $default  reduce using rule 14 (param_list)


State 226

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  104 assign: ID OS expr CS ASSIGN expr •

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105

    $default  reduce using rule 104 (assign)


State 227

  143 arg_list: arg COMMA arg_list •

    $default  reduce using rule 143 (arg_list)


State 228

   31 stmt: INPUT OC ID OS expr CS • CC SCOL

    CC  shift, and go to state 245


State 229

  124 switch_stmt: SWITCH $@15 OC ID $@16 CC • OF case_stmt_list $@17 default_stmt CF

    OF  shift, and go to state 246


State 230

  111 if_stmt: IF $@6 OC expr CC $@7 • OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OF  shift, and go to state 247


State 231

  135 while_loop_stmt: WHILE $@20 OC expr CC $@21 • OF $@22 stmt_list CF

    OF  shift, and go to state 248


State 232

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  140 for_loop_stmt: FOR OC assign SCOL $@23 expr • SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    SCOL        shift, and go to state 249


State 233

   37 declaration: FLEN OC ID CC ASSIGN ID • SCOL

    SCOL  shift, and go to state 250


State 234

   44 declaration: data_type ID OS INT_NUM CS SCOL •

    $default  reduce using rule 44 (declaration)


State 235

   45 declaration: data_type ID OS INT_NUM CS ASSIGN •

    $default  reduce using rule 45 (declaration)


State 236

   46 declaration: data_type ID OS CHARACTER CS ASSIGN •

    $default  reduce using rule 46 (declaration)


State 237

   38 declaration: data_type ID ASSIGN FLEN OC ID • CC SCOL

    CC  shift, and go to state 251


State 238

   36 declaration: data_type ID ASSIGN FLEN OC STR • CC SCOL

    CC  shift, and go to state 252


State 239

   67 expr: expr LE FLEN OC ID CC •

    $default  reduce using rule 67 (expr)


State 240

   69 expr: expr GE FLEN OC ID CC •

    $default  reduce using rule 69 (expr)


State 241

   75 expr: expr EQ FLEN OC ID CC •

    $default  reduce using rule 75 (expr)


State 242

   76 expr: expr NE FLEN OC ID CC •

    $default  reduce using rule 76 (expr)


State 243

   73 expr: expr GT FLEN OC ID CC •

    $default  reduce using rule 73 (expr)


State 244

   71 expr: expr LT FLEN OC ID CC •

    $default  reduce using rule 71 (expr)


State 245

   31 stmt: INPUT OC ID OS expr CS CC • SCOL

    SCOL  shift, and go to state 253


State 246

  124 switch_stmt: SWITCH $@15 OC ID $@16 CC OF • case_stmt_list $@17 default_stmt CF

    CASE  shift, and go to state 254

    $default  reduce using rule 126 (case_stmt_list)

    case_stmt_list  go to state 255
    case_stmt       go to state 256


State 247

  111 if_stmt: IF $@6 OC expr CC $@7 OF • $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 109 ($@8)

    $@8  go to state 257


State 248

  135 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF • $@22 stmt_list CF

    $default  reduce using rule 134 ($@22)

    $@22  go to state 258


State 249

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL • $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 137 ($@24)

    $@24  go to state 259


State 250

   37 declaration: FLEN OC ID CC ASSIGN ID SCOL •

    $default  reduce using rule 37 (declaration)


State 251

   38 declaration: data_type ID ASSIGN FLEN OC ID CC • SCOL

    SCOL  shift, and go to state 260


State 252

   36 declaration: data_type ID ASSIGN FLEN OC STR CC • SCOL

    SCOL  shift, and go to state 261


State 253

   31 stmt: INPUT OC ID OS expr CS CC SCOL •

    $default  reduce using rule 31 (stmt)


State 254

  129 case_stmt: CASE • $@18 OC const $@19 CC COLON stmt_list

    $default  reduce using rule 127 ($@18)

    $@18  go to state 262


State 255

  124 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list • $@17 default_stmt CF

    $default  reduce using rule 123 ($@17)

    $@17  go to state 263


State 256

  125 case_stmt_list: case_stmt • case_stmt_list

    CASE  shift, and go to state 254

    $default  reduce using rule 126 (case_stmt_list)

    case_stmt_list  go to state 264
    case_stmt       go to state 256


State 257

  111 if_stmt: IF $@6 OC expr CC $@7 OF $@8 • stmt_list CF $@9 elif_stmt else_stmt

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 265
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 258

  135 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 266
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 259

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 • assign CC $@25 OF $@26 stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    FLEN       shift, and go to state 44

    declaration   go to state 129
    data_type     go to state 49
    expr          go to state 130
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    assign        go to state 267
    func_call     go to state 61


State 260

   38 declaration: data_type ID ASSIGN FLEN OC ID CC SCOL •

    $default  reduce using rule 38 (declaration)


State 261

   36 declaration: data_type ID ASSIGN FLEN OC STR CC SCOL •

    $default  reduce using rule 36 (declaration)


State 262

  129 case_stmt: CASE $@18 • OC const $@19 CC COLON stmt_list

    OC  shift, and go to state 268


State 263

  124 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 • default_stmt CF

    DEFAULT  shift, and go to state 269

    $default  reduce using rule 131 (default_stmt)

    default_stmt  go to state 270


State 264

  125 case_stmt_list: case_stmt case_stmt_list •

    $default  reduce using rule 125 (case_stmt_list)


State 265

  111 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list • CF $@9 elif_stmt else_stmt

    CF  shift, and go to state 271


State 266

  135 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list • CF

    CF  shift, and go to state 272


State 267

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign • CC $@25 OF $@26 stmt_list CF

    CC  shift, and go to state 273


State 268

  129 case_stmt: CASE $@18 OC • const $@19 CC COLON stmt_list

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    CHARACTER  shift, and go to state 32

    const  go to state 274


State 269

  130 default_stmt: DEFAULT • COLON stmt_list

    COLON  shift, and go to state 275


State 270

  124 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt • CF

    CF  shift, and go to state 276


State 271

  111 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF • $@9 elif_stmt else_stmt

    $default  reduce using rule 110 ($@9)

    $@9  go to state 277


State 272

  135 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF •

    $default  reduce using rule 135 (while_loop_stmt)


State 273

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC • $@25 OF $@26 stmt_list CF

    $default  reduce using rule 138 ($@25)

    $@25  go to state 278


State 274

  129 case_stmt: CASE $@18 OC const • $@19 CC COLON stmt_list

    $default  reduce using rule 128 ($@19)

    $@19  go to state 279


State 275

  130 default_stmt: DEFAULT COLON • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 280
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 276

  124 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF •

    $default  reduce using rule 124 (switch_stmt)


State 277

  111 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 • elif_stmt else_stmt

    ELIF  shift, and go to state 281

    $default  reduce using rule 117 (elif_stmt)

    elif_stmt  go to state 282


State 278

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 • OF $@26 stmt_list CF

    OF  shift, and go to state 283


State 279

  129 case_stmt: CASE $@18 OC const $@19 • CC COLON stmt_list

    CC  shift, and go to state 284


State 280

  130 default_stmt: DEFAULT COLON stmt_list •

    $default  reduce using rule 130 (default_stmt)


State 281

  116 elif_stmt: ELIF • $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 112 ($@10)

    $@10  go to state 285


State 282

  111 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt • else_stmt

    ELSE  shift, and go to state 286

    $default  reduce using rule 120 (else_stmt)

    else_stmt  go to state 287


State 283

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF • $@26 stmt_list CF

    $default  reduce using rule 139 ($@26)

    $@26  go to state 288


State 284

  129 case_stmt: CASE $@18 OC const $@19 CC • COLON stmt_list

    COLON  shift, and go to state 289


State 285

  116 elif_stmt: ELIF $@10 • OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    OC  shift, and go to state 290


State 286

  119 else_stmt: ELSE • OF $@14 stmt_list CF

    OF  shift, and go to state 291


State 287

  111 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt •

    $default  reduce using rule 111 (if_stmt)


State 288

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 292
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 289

  129 case_stmt: CASE $@18 OC const $@19 CC COLON • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 293
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 290

  116 elif_stmt: ELIF $@10 OC • expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 64
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 294
    postfix_expr  go to state 51
    unary_expr    go to state 52
    primary_expr  go to state 53
    unary_op      go to state 54
    const         go to state 55
    func_call     go to state 61


State 291

  119 else_stmt: ELSE OF • $@14 stmt_list CF

    $default  reduce using rule 118 ($@14)

    $@14  go to state 295


State 292

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list • CF

    CF  shift, and go to state 296


State 293

  129 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list •

    $default  reduce using rule 129 (case_stmt)


State 294

   62 expr: expr • ADD expr
   63     | expr • SUBTRACT expr
   64     | expr • MULTIPLY expr
   65     | expr • DIVIDE expr
   66     | expr • LE expr
   67     | expr • LE FLEN OC ID CC
   68     | expr • GE expr
   69     | expr • GE FLEN OC ID CC
   70     | expr • LT expr
   71     | expr • LT FLEN OC ID CC
   72     | expr • GT expr
   73     | expr • GT FLEN OC ID CC
   74     | expr • EQ expr
   75     | expr • EQ FLEN OC ID CC
   76     | expr • NE FLEN OC ID CC
   77     | expr • NE expr
   78     | expr • AND expr
   79     | expr • OR expr
   80     | expr • MODULO expr
   81     | expr • BITAND expr
   82     | expr • BITOR expr
   83     | expr • XOR expr
   84     | expr • LEFTSHIFT expr
   85     | expr • RIGHTSHIFT expr
   89     | expr • ADD ADD
  116 elif_stmt: ELIF $@10 OC expr • CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    LEFTSHIFT   shift, and go to state 88
    RIGHTSHIFT  shift, and go to state 89
    LE          shift, and go to state 90
    GE          shift, and go to state 91
    EQ          shift, and go to state 92
    NE          shift, and go to state 93
    GT          shift, and go to state 94
    LT          shift, and go to state 95
    AND         shift, and go to state 96
    OR          shift, and go to state 97
    ADD         shift, and go to state 98
    SUBTRACT    shift, and go to state 99
    DIVIDE      shift, and go to state 100
    MULTIPLY    shift, and go to state 101
    MODULO      shift, and go to state 102
    BITAND      shift, and go to state 103
    BITOR       shift, and go to state 104
    XOR         shift, and go to state 105
    CC          shift, and go to state 297


State 295

  119 else_stmt: ELSE OF $@14 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 298
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 296

  140 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF •

    $default  reduce using rule 140 (for_loop_stmt)


State 297

  116 elif_stmt: ELIF $@10 OC expr CC • $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 113 ($@11)

    $@11  go to state 299


State 298

  119 else_stmt: ELSE OF $@14 stmt_list • CF

    CF  shift, and go to state 300


State 299

  116 elif_stmt: ELIF $@10 OC expr CC $@11 • OF $@12 stmt_list CF $@13 elif_stmt

    OF  shift, and go to state 301


State 300

  119 else_stmt: ELSE OF $@14 stmt_list CF •

    $default  reduce using rule 119 (else_stmt)


State 301

  116 elif_stmt: ELIF $@10 OC expr CC $@11 OF • $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 114 ($@12)

    $@12  go to state 302


State 302

  116 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 • stmt_list CF $@13 elif_stmt

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44

    SCOL      reduce using rule 56 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 303
    stmt             go to state 46
    declaration      go to state 47
    return_stmt      go to state 48
    data_type        go to state 49
    expr             go to state 50
    postfix_expr     go to state 51
    unary_expr       go to state 52
    primary_expr     go to state 53
    unary_op         go to state 54
    const            go to state 55
    assign           go to state 56
    if_stmt          go to state 57
    switch_stmt      go to state 58
    while_loop_stmt  go to state 59
    for_loop_stmt    go to state 60
    func_call        go to state 61


State 303

  116 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list • CF $@13 elif_stmt

    CF  shift, and go to state 304


State 304

  116 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF • $@13 elif_stmt

    $default  reduce using rule 115 ($@13)

    $@13  go to state 305


State 305

  116 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 • elif_stmt

    ELIF  shift, and go to state 281

    $default  reduce using rule 117 (elif_stmt)

    elif_stmt  go to state 306


State 306

  116 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt •

    $default  reduce using rule 116 (elif_stmt)
