State 22 conflicts: 1 shift/reduce
State 44 conflicts: 1 reduce/reduce
State 47 conflicts: 1 shift/reduce


Grammar

    0 $accept: Code $end

    1 Code: headerfileInclude Program

    2 headerfileInclude: INCLUDE HEADERFILE headerfileInclude
    3                  | ε

    4 Program: func_list

    5 func_list: func_list func
    6          | ε

    7 $@1: ε

    8 func: func_prefix OF $@1 stmt_list CF

    9 $@2: ε

   10 func_prefix: func_data_type ID $@2 OC param_list CC

   11 func_data_type: data_type
   12               | VOID

   13 $@3: ε

   14 param_list: param $@3 COMMA param_list
   15           | param
   16           | ε

   17 param: data_type ID

   18 stmt_list: stmt stmt_list
   19          | ε

   20 stmt: declaration
   21     | assign SCOL
   22     | expr SCOL
   23     | return_stmt SCOL
   24     | if_stmt
   25     | while_loop_stmt
   26     | for_loop_stmt
   27     | BREAK SCOL
   28     | CONTINUE SCOL
   29     | switch_stmt
   30     | INPUT OC ID CC SCOL
   31     | INPUT OC ID OS expr CS CC SCOL
   32     | OUTPUT OC expr CC SCOL
   33     | OUTPUT OC STR CC SCOL
   34     | TYPEOF ID SCOL

   35 declaration: data_type ID SCOL
   36            | STRING ID SCOL
   37            | STRING ID ASSIGN STR SCOL
   38            | STRING ID ASSIGN expr SCOL
   39            | data_type ID ASSIGN expr SCOL
   40            | data_type ID OS INT_NUM CS SCOL

   41 $@4: ε

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

   43 $@5: ε

   44 arr_values: const $@5 COMMA arr_values
   45           | const

   46 return_stmt: RETURN expr
   47            | RETURN STR
   48            | ε

   49 data_type: INT
   50          | FLOAT
   51          | STRING
   52          | CHAR

   53 expr: expr ADD expr
   54     | expr SUBTRACT expr
   55     | expr MULTIPLY expr
   56     | expr DIVIDE expr
   57     | expr LE expr
   58     | expr GE expr
   59     | expr LT expr
   60     | expr GT expr
   61     | expr EQ expr
   62     | expr NE expr
   63     | expr AND expr
   64     | expr OR expr
   65     | expr MODULO expr
   66     | expr BITAND expr
   67     | expr BITOR expr
   68     | expr XOR expr
   69     | expr LEFTSHIFT expr
   70     | expr RIGHTSHIFT expr
   71     | unary_expr
   72     | primary_expr
   73     | postfix_expr
   74     | expr ADD ADD

   75 postfix_expr: func_call
   76             | ID OS expr CS

   77 unary_expr: unary_op primary_expr

   78 primary_expr: ID
   79             | const
   80             | OC expr CC

   81 unary_op: ADD
   82         | SUBTRACT
   83         | NOT
   84         | NEGATION

   85 const: INT_NUM
   86      | FLOAT_NUM
   87      | CHARACTER

   88 assign: ID ASSIGN expr
   89       | ID OS expr CS ASSIGN expr
   90       | expr
   91       | declaration

   92 $@6: ε

   93 $@7: ε

   94 $@8: ε

   95 $@9: ε

   96 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

   97 $@10: ε

   98 $@11: ε

   99 $@12: ε

  100 $@13: ε

  101 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt
  102          | ε

  103 $@14: ε

  104 else_stmt: ELSE OF $@14 stmt_list CF
  105          | ε

  106 $@15: ε

  107 $@16: ε

  108 $@17: ε

  109 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

  110 case_stmt_list: case_stmt case_stmt_list
  111               | ε

  112 $@18: ε

  113 $@19: ε

  114 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list

  115 default_stmt: DEFAULT COLON stmt_list
  116             | ε

  117 $@20: ε

  118 $@21: ε

  119 $@22: ε

  120 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF

  121 $@23: ε

  122 $@24: ε

  123 $@25: ε

  124 $@26: ε

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

  126 $@27: ε

  127 func_call: ID $@27 OC arg_list CC

  128 arg_list: arg COMMA arg_list
  129         | arg
  130         | ε

  131 arg: expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INCLUDE <node> (258) 2
    HEADERFILE <node> (259) 2
    INT <node> (260) 49
    CHAR <node> (261) 52
    FLOAT <node> (262) 50
    STRING <node> (263) 36 37 38 51
    VOID <node> (264) 12
    RETURN <node> (265) 46 47
    INT_NUM <node> (266) 40 42 85
    FLOAT_NUM <node> (267) 86
    ID <node> (268) 10 17 30 31 34 35 36 37 38 39 40 42 76 78 88 89 109 127
    LEFTSHIFT <node> (269) 69
    RIGHTSHIFT <node> (270) 70
    LE <node> (271) 57
    GE <node> (272) 58
    EQ <node> (273) 61
    NE <node> (274) 62
    GT <node> (275) 60
    LT <node> (276) 59
    AND <node> (277) 63
    OR <node> (278) 64
    NOT <node> (279) 83
    ADD <node> (280) 53 74 81
    SUBTRACT <node> (281) 54 82
    DIVIDE <node> (282) 56
    MULTIPLY <node> (283) 55
    MODULO <node> (284) 65
    BITAND <node> (285) 66
    BITOR <node> (286) 67
    NEGATION <node> (287) 84
    XOR <node> (288) 68
    STR <node> (289) 33 37 47
    CHARACTER <node> (290) 87
    CC <node> (291) 10 30 31 32 33 80 96 101 109 114 120 125 127
    OC <node> (292) 10 30 31 32 33 80 96 101 109 114 120 125 127
    CS <node> (293) 31 40 42 76 89
    OS <node> (294) 31 40 42 76 89
    CF <node> (295) 8 42 96 101 104 109 120 125
    OF <node> (296) 8 42 96 101 104 109 120 125
    COMMA <node> (297) 14 44 128
    COLON <node> (298) 114 115
    SCOL <node> (299) 21 22 23 27 28 30 31 32 33 34 35 36 37 38 39 40 42 125
    OUTPUT <node> (300) 32 33
    INPUT <node> (301) 30 31
    SWITCH <node> (302) 109
    CASE <node> (303) 114
    BREAK <node> (304) 27
    DEFAULT <node> (305) 115
    IF <node> (306) 96
    ELIF <node> (307) 101
    ELSE <node> (308) 104
    WHILE <node> (309) 120
    FOR <node> (310) 125
    CONTINUE <node> (311) 28
    TYPEOF <node> (312) 34
    ASSIGN (313) 37 38 39 42 88 89


Nonterminals, with rules where they appear

    $accept (59)
        on left: 0
    Code (60)
        on left: 1
        on right: 0
    headerfileInclude <node> (61)
        on left: 2 3
        on right: 1 2
    Program <node> (62)
        on left: 4
        on right: 1
    func_list <node> (63)
        on left: 5 6
        on right: 4 5
    func <node> (64)
        on left: 8
        on right: 5
    $@1 (65)
        on left: 7
        on right: 8
    func_prefix <node> (66)
        on left: 10
        on right: 8
    $@2 (67)
        on left: 9
        on right: 10
    func_data_type <node> (68)
        on left: 11 12
        on right: 10
    param_list <node> (69)
        on left: 14 15 16
        on right: 10 14
    $@3 (70)
        on left: 13
        on right: 14
    param <node> (71)
        on left: 17
        on right: 14 15
    stmt_list <node> (72)
        on left: 18 19
        on right: 8 18 96 101 104 114 115 120 125
    stmt <node> (73)
        on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
        on right: 18
    declaration <node> (74)
        on left: 35 36 37 38 39 40 42
        on right: 20 91
    $@4 (75)
        on left: 41
        on right: 42
    arr_values (76)
        on left: 44 45
        on right: 42 44
    $@5 (77)
        on left: 43
        on right: 44
    return_stmt <node> (78)
        on left: 46 47 48
        on right: 23
    data_type <node> (79)
        on left: 49 50 51 52
        on right: 11 17 35 39 40 42
    expr <node> (80)
        on left: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74
        on right: 22 31 32 38 39 46 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 74 76 80 88 89 90 96 101 120 125 131
    postfix_expr <node> (81)
        on left: 75 76
        on right: 73
    unary_expr <node> (82)
        on left: 77
        on right: 71
    primary_expr <node> (83)
        on left: 78 79 80
        on right: 72 77
    unary_op <node> (84)
        on left: 81 82 83 84
        on right: 77
    const <node> (85)
        on left: 85 86 87
        on right: 44 45 79 114
    assign <node> (86)
        on left: 88 89 90 91
        on right: 21 125
    if_stmt <node> (87)
        on left: 96
        on right: 24
    $@6 (88)
        on left: 92
        on right: 96
    $@7 (89)
        on left: 93
        on right: 96
    $@8 (90)
        on left: 94
        on right: 96
    $@9 (91)
        on left: 95
        on right: 96
    elif_stmt <node> (92)
        on left: 101 102
        on right: 96 101
    $@10 (93)
        on left: 97
        on right: 101
    $@11 (94)
        on left: 98
        on right: 101
    $@12 (95)
        on left: 99
        on right: 101
    $@13 (96)
        on left: 100
        on right: 101
    else_stmt <node> (97)
        on left: 104 105
        on right: 96
    $@14 (98)
        on left: 103
        on right: 104
    switch_stmt <node> (99)
        on left: 109
        on right: 29
    $@15 (100)
        on left: 106
        on right: 109
    $@16 (101)
        on left: 107
        on right: 109
    $@17 (102)
        on left: 108
        on right: 109
    case_stmt_list <node> (103)
        on left: 110 111
        on right: 109 110
    case_stmt <node> (104)
        on left: 114
        on right: 110
    $@18 (105)
        on left: 112
        on right: 114
    $@19 (106)
        on left: 113
        on right: 114
    default_stmt (107)
        on left: 115 116
        on right: 109
    while_loop_stmt <node> (108)
        on left: 120
        on right: 25
    $@20 (109)
        on left: 117
        on right: 120
    $@21 (110)
        on left: 118
        on right: 120
    $@22 (111)
        on left: 119
        on right: 120
    for_loop_stmt <node> (112)
        on left: 125
        on right: 26
    $@23 (113)
        on left: 121
        on right: 125
    $@24 (114)
        on left: 122
        on right: 125
    $@25 (115)
        on left: 123
        on right: 125
    $@26 (116)
        on left: 124
        on right: 125
    func_call <node> (117)
        on left: 127
        on right: 75
    $@27 (118)
        on left: 126
        on right: 127
    arg_list <node> (119)
        on left: 128 129 130
        on right: 127 128
    arg <node> (120)
        on left: 131
        on right: 128 129


State 0

    0 $accept: • Code $end

    INCLUDE  shift, and go to state 1

    $default  reduce using rule 3 (headerfileInclude)

    Code               go to state 2
    headerfileInclude  go to state 3


State 1

    2 headerfileInclude: INCLUDE • HEADERFILE headerfileInclude

    HEADERFILE  shift, and go to state 4


State 2

    0 $accept: Code • $end

    $end  shift, and go to state 5


State 3

    1 Code: headerfileInclude • Program

    $default  reduce using rule 6 (func_list)

    Program    go to state 6
    func_list  go to state 7


State 4

    2 headerfileInclude: INCLUDE HEADERFILE • headerfileInclude

    INCLUDE  shift, and go to state 1

    $default  reduce using rule 3 (headerfileInclude)

    headerfileInclude  go to state 8


State 5

    0 $accept: Code $end •

    $default  accept


State 6

    1 Code: headerfileInclude Program •

    $default  reduce using rule 1 (Code)


State 7

    4 Program: func_list •
    5 func_list: func_list • func

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    VOID    shift, and go to state 13

    $default  reduce using rule 4 (Program)

    func            go to state 14
    func_prefix     go to state 15
    func_data_type  go to state 16
    data_type       go to state 17


State 8

    2 headerfileInclude: INCLUDE HEADERFILE headerfileInclude •

    $default  reduce using rule 2 (headerfileInclude)


State 9

   49 data_type: INT •

    $default  reduce using rule 49 (data_type)


State 10

   52 data_type: CHAR •

    $default  reduce using rule 52 (data_type)


State 11

   50 data_type: FLOAT •

    $default  reduce using rule 50 (data_type)


State 12

   51 data_type: STRING •

    $default  reduce using rule 51 (data_type)


State 13

   12 func_data_type: VOID •

    $default  reduce using rule 12 (func_data_type)


State 14

    5 func_list: func_list func •

    $default  reduce using rule 5 (func_list)


State 15

    8 func: func_prefix • OF $@1 stmt_list CF

    OF  shift, and go to state 18


State 16

   10 func_prefix: func_data_type • ID $@2 OC param_list CC

    ID  shift, and go to state 19


State 17

   11 func_data_type: data_type •

    $default  reduce using rule 11 (func_data_type)


State 18

    8 func: func_prefix OF • $@1 stmt_list CF

    $default  reduce using rule 7 ($@1)

    $@1  go to state 20


State 19

   10 func_prefix: func_data_type ID • $@2 OC param_list CC

    $default  reduce using rule 9 ($@2)

    $@2  go to state 21


State 20

    8 func: func_prefix OF $@1 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 42
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 21

   10 func_prefix: func_data_type ID $@2 • OC param_list CC

    OC  shift, and go to state 59


State 22

   36 declaration: STRING • ID SCOL
   37            | STRING • ID ASSIGN STR SCOL
   38            | STRING • ID ASSIGN expr SCOL
   51 data_type: STRING •

    ID  shift, and go to state 60

    ID  [reduce using rule 51 (data_type)]


State 23

   46 return_stmt: RETURN • expr
   47            | RETURN • STR

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    STR        shift, and go to state 62
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 63
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 24

   85 const: INT_NUM •

    $default  reduce using rule 85 (const)


State 25

   86 const: FLOAT_NUM •

    $default  reduce using rule 86 (const)


State 26

   76 postfix_expr: ID • OS expr CS
   78 primary_expr: ID •
   88 assign: ID • ASSIGN expr
   89       | ID • OS expr CS ASSIGN expr
  127 func_call: ID • $@27 OC arg_list CC

    OS      shift, and go to state 64
    ASSIGN  shift, and go to state 65

    OC        reduce using rule 126 ($@27)
    $default  reduce using rule 78 (primary_expr)

    $@27  go to state 66


State 27

   83 unary_op: NOT •

    $default  reduce using rule 83 (unary_op)


State 28

   81 unary_op: ADD •

    $default  reduce using rule 81 (unary_op)


State 29

   82 unary_op: SUBTRACT •

    $default  reduce using rule 82 (unary_op)


State 30

   84 unary_op: NEGATION •

    $default  reduce using rule 84 (unary_op)


State 31

   87 const: CHARACTER •

    $default  reduce using rule 87 (const)


State 32

   80 primary_expr: OC • expr CC

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 67
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 33

   32 stmt: OUTPUT • OC expr CC SCOL
   33     | OUTPUT • OC STR CC SCOL

    OC  shift, and go to state 68


State 34

   30 stmt: INPUT • OC ID CC SCOL
   31     | INPUT • OC ID OS expr CS CC SCOL

    OC  shift, and go to state 69


State 35

  109 switch_stmt: SWITCH • $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 106 ($@15)

    $@15  go to state 70


State 36

   27 stmt: BREAK • SCOL

    SCOL  shift, and go to state 71


State 37

   96 if_stmt: IF • $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 92 ($@6)

    $@6  go to state 72


State 38

  120 while_loop_stmt: WHILE • $@20 OC expr CC $@21 OF $@22 stmt_list CF

    $default  reduce using rule 117 ($@20)

    $@20  go to state 73


State 39

  125 for_loop_stmt: FOR • OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    OC  shift, and go to state 74


State 40

   28 stmt: CONTINUE • SCOL

    SCOL  shift, and go to state 75


State 41

   34 stmt: TYPEOF • ID SCOL

    ID  shift, and go to state 76


State 42

    8 func: func_prefix OF $@1 stmt_list • CF

    CF  shift, and go to state 77


State 43

   18 stmt_list: stmt • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 78
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 44

   20 stmt: declaration •
   91 assign: declaration •

    SCOL      reduce using rule 20 (stmt)
    SCOL      [reduce using rule 91 (assign)]
    $default  reduce using rule 20 (stmt)


State 45

   23 stmt: return_stmt • SCOL

    SCOL  shift, and go to state 79


State 46

   35 declaration: data_type • ID SCOL
   39            | data_type • ID ASSIGN expr SCOL
   40            | data_type • ID OS INT_NUM CS SCOL
   42            | data_type • ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    ID  shift, and go to state 80


State 47

   22 stmt: expr • SCOL
   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
   90 assign: expr •

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    SCOL        shift, and go to state 99

    SCOL  [reduce using rule 90 (assign)]


State 48

   73 expr: postfix_expr •

    $default  reduce using rule 73 (expr)


State 49

   71 expr: unary_expr •

    $default  reduce using rule 71 (expr)


State 50

   72 expr: primary_expr •

    $default  reduce using rule 72 (expr)


State 51

   77 unary_expr: unary_op • primary_expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 100
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    primary_expr  go to state 101
    const         go to state 52


State 52

   79 primary_expr: const •

    $default  reduce using rule 79 (primary_expr)


State 53

   21 stmt: assign • SCOL

    SCOL  shift, and go to state 102


State 54

   24 stmt: if_stmt •

    $default  reduce using rule 24 (stmt)


State 55

   29 stmt: switch_stmt •

    $default  reduce using rule 29 (stmt)


State 56

   25 stmt: while_loop_stmt •

    $default  reduce using rule 25 (stmt)


State 57

   26 stmt: for_loop_stmt •

    $default  reduce using rule 26 (stmt)


State 58

   75 postfix_expr: func_call •

    $default  reduce using rule 75 (postfix_expr)


State 59

   10 func_prefix: func_data_type ID $@2 OC • param_list CC

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12

    $default  reduce using rule 16 (param_list)

    param_list  go to state 103
    param       go to state 104
    data_type   go to state 105


State 60

   36 declaration: STRING ID • SCOL
   37            | STRING ID • ASSIGN STR SCOL
   38            | STRING ID • ASSIGN expr SCOL

    SCOL    shift, and go to state 106
    ASSIGN  shift, and go to state 107


State 61

   76 postfix_expr: ID • OS expr CS
   78 primary_expr: ID •
  127 func_call: ID • $@27 OC arg_list CC

    OS  shift, and go to state 108

    OC        reduce using rule 126 ($@27)
    $default  reduce using rule 78 (primary_expr)

    $@27  go to state 66


State 62

   47 return_stmt: RETURN STR •

    $default  reduce using rule 47 (return_stmt)


State 63

   46 return_stmt: RETURN expr •
   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98

    $default  reduce using rule 46 (return_stmt)


State 64

   76 postfix_expr: ID OS • expr CS
   89 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 109
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 65

   88 assign: ID ASSIGN • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 110
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 66

  127 func_call: ID $@27 • OC arg_list CC

    OC  shift, and go to state 111


State 67

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
   80 primary_expr: OC expr • CC

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    CC          shift, and go to state 112


State 68

   32 stmt: OUTPUT OC • expr CC SCOL
   33     | OUTPUT OC • STR CC SCOL

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    STR        shift, and go to state 113
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 114
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 69

   30 stmt: INPUT OC • ID CC SCOL
   31     | INPUT OC • ID OS expr CS CC SCOL

    ID  shift, and go to state 115


State 70

  109 switch_stmt: SWITCH $@15 • OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    OC  shift, and go to state 116


State 71

   27 stmt: BREAK SCOL •

    $default  reduce using rule 27 (stmt)


State 72

   96 if_stmt: IF $@6 • OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OC  shift, and go to state 117


State 73

  120 while_loop_stmt: WHILE $@20 • OC expr CC $@21 OF $@22 stmt_list CF

    OC  shift, and go to state 118


State 74

  125 for_loop_stmt: FOR OC • assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    declaration   go to state 119
    data_type     go to state 46
    expr          go to state 120
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    assign        go to state 121
    func_call     go to state 58


State 75

   28 stmt: CONTINUE SCOL •

    $default  reduce using rule 28 (stmt)


State 76

   34 stmt: TYPEOF ID • SCOL

    SCOL  shift, and go to state 122


State 77

    8 func: func_prefix OF $@1 stmt_list CF •

    $default  reduce using rule 8 (func)


State 78

   18 stmt_list: stmt stmt_list •

    $default  reduce using rule 18 (stmt_list)


State 79

   23 stmt: return_stmt SCOL •

    $default  reduce using rule 23 (stmt)


State 80

   35 declaration: data_type ID • SCOL
   39            | data_type ID • ASSIGN expr SCOL
   40            | data_type ID • OS INT_NUM CS SCOL
   42            | data_type ID • OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    OS      shift, and go to state 123
    SCOL    shift, and go to state 124
    ASSIGN  shift, and go to state 125


State 81

   69 expr: expr LEFTSHIFT • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 126
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 82

   70 expr: expr RIGHTSHIFT • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 127
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 83

   57 expr: expr LE • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 128
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 84

   58 expr: expr GE • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 129
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 85

   61 expr: expr EQ • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 130
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 86

   62 expr: expr NE • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 131
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 87

   60 expr: expr GT • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 132
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 88

   59 expr: expr LT • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 133
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 89

   63 expr: expr AND • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 134
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 90

   64 expr: expr OR • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 135
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 91

   53 expr: expr ADD • expr
   74     | expr ADD • ADD

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 136
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 137
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 92

   54 expr: expr SUBTRACT • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 138
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 93

   56 expr: expr DIVIDE • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 139
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 94

   55 expr: expr MULTIPLY • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 140
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 95

   65 expr: expr MODULO • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 141
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 96

   66 expr: expr BITAND • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 142
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 97

   67 expr: expr BITOR • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 143
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 98

   68 expr: expr XOR • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 144
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 99

   22 stmt: expr SCOL •

    $default  reduce using rule 22 (stmt)


State 100

   78 primary_expr: ID •

    $default  reduce using rule 78 (primary_expr)


State 101

   77 unary_expr: unary_op primary_expr •

    $default  reduce using rule 77 (unary_expr)


State 102

   21 stmt: assign SCOL •

    $default  reduce using rule 21 (stmt)


State 103

   10 func_prefix: func_data_type ID $@2 OC param_list • CC

    CC  shift, and go to state 145


State 104

   14 param_list: param • $@3 COMMA param_list
   15           | param •

    CC        reduce using rule 15 (param_list)
    $default  reduce using rule 13 ($@3)

    $@3  go to state 146


State 105

   17 param: data_type • ID

    ID  shift, and go to state 147


State 106

   36 declaration: STRING ID SCOL •

    $default  reduce using rule 36 (declaration)


State 107

   37 declaration: STRING ID ASSIGN • STR SCOL
   38            | STRING ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    STR        shift, and go to state 148
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 149
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 108

   76 postfix_expr: ID OS • expr CS

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 150
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 109

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
   76 postfix_expr: ID OS expr • CS
   89 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    CS          shift, and go to state 151


State 110

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
   88 assign: ID ASSIGN expr •

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98

    $default  reduce using rule 88 (assign)


State 111

  127 func_call: ID $@27 OC • arg_list CC

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    $default  reduce using rule 130 (arg_list)

    expr          go to state 152
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58
    arg_list      go to state 153
    arg           go to state 154


State 112

   80 primary_expr: OC expr CC •

    $default  reduce using rule 80 (primary_expr)


State 113

   33 stmt: OUTPUT OC STR • CC SCOL

    CC  shift, and go to state 155


State 114

   32 stmt: OUTPUT OC expr • CC SCOL
   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    CC          shift, and go to state 156


State 115

   30 stmt: INPUT OC ID • CC SCOL
   31     | INPUT OC ID • OS expr CS CC SCOL

    CC  shift, and go to state 157
    OS  shift, and go to state 158


State 116

  109 switch_stmt: SWITCH $@15 OC • ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    ID  shift, and go to state 159


State 117

   96 if_stmt: IF $@6 OC • expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 160
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 118

  120 while_loop_stmt: WHILE $@20 OC • expr CC $@21 OF $@22 stmt_list CF

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 161
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 119

   91 assign: declaration •

    $default  reduce using rule 91 (assign)


State 120

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
   90 assign: expr •

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98

    $default  reduce using rule 90 (assign)


State 121

  125 for_loop_stmt: FOR OC assign • SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    SCOL  shift, and go to state 162


State 122

   34 stmt: TYPEOF ID SCOL •

    $default  reduce using rule 34 (stmt)


State 123

   40 declaration: data_type ID OS • INT_NUM CS SCOL
   42            | data_type ID OS • INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    INT_NUM  shift, and go to state 163


State 124

   35 declaration: data_type ID SCOL •

    $default  reduce using rule 35 (declaration)


State 125

   39 declaration: data_type ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 164
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 126

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   69     | expr LEFTSHIFT expr •
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    ADD       shift, and go to state 91
    SUBTRACT  shift, and go to state 92
    DIVIDE    shift, and go to state 93
    MULTIPLY  shift, and go to state 94
    MODULO    shift, and go to state 95

    $default  reduce using rule 69 (expr)


State 127

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   70     | expr RIGHTSHIFT expr •
   74     | expr • ADD ADD

    ADD       shift, and go to state 91
    SUBTRACT  shift, and go to state 92
    DIVIDE    shift, and go to state 93
    MULTIPLY  shift, and go to state 94
    MODULO    shift, and go to state 95

    $default  reduce using rule 70 (expr)


State 128

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   57     | expr LE expr •
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95

    $default  reduce using rule 57 (expr)


State 129

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   58     | expr GE expr •
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95

    $default  reduce using rule 58 (expr)


State 130

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   61     | expr EQ expr •
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95

    $default  reduce using rule 61 (expr)


State 131

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   62     | expr NE expr •
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95

    $default  reduce using rule 62 (expr)


State 132

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   60     | expr GT expr •
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95

    $default  reduce using rule 60 (expr)


State 133

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   59     | expr LT expr •
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95

    $default  reduce using rule 59 (expr)


State 134

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   63     | expr AND expr •
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98

    $default  reduce using rule 63 (expr)


State 135

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   64     | expr OR expr •
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98

    $default  reduce using rule 64 (expr)


State 136

   74 expr: expr ADD ADD •
   81 unary_op: ADD •

    INT_NUM    reduce using rule 81 (unary_op)
    FLOAT_NUM  reduce using rule 81 (unary_op)
    ID         reduce using rule 81 (unary_op)
    CHARACTER  reduce using rule 81 (unary_op)
    OC         reduce using rule 81 (unary_op)
    $default   reduce using rule 74 (expr)


State 137

   53 expr: expr • ADD expr
   53     | expr ADD expr •
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    DIVIDE    shift, and go to state 93
    MULTIPLY  shift, and go to state 94
    MODULO    shift, and go to state 95

    $default  reduce using rule 53 (expr)


State 138

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   54     | expr SUBTRACT expr •
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    DIVIDE    shift, and go to state 93
    MULTIPLY  shift, and go to state 94
    MODULO    shift, and go to state 95

    $default  reduce using rule 54 (expr)


State 139

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   56     | expr DIVIDE expr •
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    $default  reduce using rule 56 (expr)


State 140

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   55     | expr MULTIPLY expr •
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    $default  reduce using rule 55 (expr)


State 141

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   65     | expr MODULO expr •
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    $default  reduce using rule 65 (expr)


State 142

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   66     | expr BITAND expr •
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95

    $default  reduce using rule 66 (expr)


State 143

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   67     | expr BITOR expr •
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    XOR         shift, and go to state 98

    $default  reduce using rule 67 (expr)


State 144

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   68     | expr XOR expr •
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96

    $default  reduce using rule 68 (expr)


State 145

   10 func_prefix: func_data_type ID $@2 OC param_list CC •

    $default  reduce using rule 10 (func_prefix)


State 146

   14 param_list: param $@3 • COMMA param_list

    COMMA  shift, and go to state 165


State 147

   17 param: data_type ID •

    $default  reduce using rule 17 (param)


State 148

   37 declaration: STRING ID ASSIGN STR • SCOL

    SCOL  shift, and go to state 166


State 149

   38 declaration: STRING ID ASSIGN expr • SCOL
   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    SCOL        shift, and go to state 167


State 150

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
   76 postfix_expr: ID OS expr • CS

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    CS          shift, and go to state 168


State 151

   76 postfix_expr: ID OS expr CS •
   89 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 169

    $default  reduce using rule 76 (postfix_expr)


State 152

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
  131 arg: expr •

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98

    $default  reduce using rule 131 (arg)


State 153

  127 func_call: ID $@27 OC arg_list • CC

    CC  shift, and go to state 170


State 154

  128 arg_list: arg • COMMA arg_list
  129         | arg •

    COMMA  shift, and go to state 171

    $default  reduce using rule 129 (arg_list)


State 155

   33 stmt: OUTPUT OC STR CC • SCOL

    SCOL  shift, and go to state 172


State 156

   32 stmt: OUTPUT OC expr CC • SCOL

    SCOL  shift, and go to state 173


State 157

   30 stmt: INPUT OC ID CC • SCOL

    SCOL  shift, and go to state 174


State 158

   31 stmt: INPUT OC ID OS • expr CS CC SCOL

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 175
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 159

  109 switch_stmt: SWITCH $@15 OC ID • $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 107 ($@16)

    $@16  go to state 176


State 160

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
   96 if_stmt: IF $@6 OC expr • CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    CC          shift, and go to state 177


State 161

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
  120 while_loop_stmt: WHILE $@20 OC expr • CC $@21 OF $@22 stmt_list CF

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    CC          shift, and go to state 178


State 162

  125 for_loop_stmt: FOR OC assign SCOL • $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 121 ($@23)

    $@23  go to state 179


State 163

   40 declaration: data_type ID OS INT_NUM • CS SCOL
   42            | data_type ID OS INT_NUM • CS ASSIGN $@4 OF arr_values CF SCOL

    CS  shift, and go to state 180


State 164

   39 declaration: data_type ID ASSIGN expr • SCOL
   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    SCOL        shift, and go to state 181


State 165

   14 param_list: param $@3 COMMA • param_list

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12

    $default  reduce using rule 16 (param_list)

    param_list  go to state 182
    param       go to state 104
    data_type   go to state 105


State 166

   37 declaration: STRING ID ASSIGN STR SCOL •

    $default  reduce using rule 37 (declaration)


State 167

   38 declaration: STRING ID ASSIGN expr SCOL •

    $default  reduce using rule 38 (declaration)


State 168

   76 postfix_expr: ID OS expr CS •

    $default  reduce using rule 76 (postfix_expr)


State 169

   89 assign: ID OS expr CS ASSIGN • expr

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 183
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 170

  127 func_call: ID $@27 OC arg_list CC •

    $default  reduce using rule 127 (func_call)


State 171

  128 arg_list: arg COMMA • arg_list

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    $default  reduce using rule 130 (arg_list)

    expr          go to state 152
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58
    arg_list      go to state 184
    arg           go to state 154


State 172

   33 stmt: OUTPUT OC STR CC SCOL •

    $default  reduce using rule 33 (stmt)


State 173

   32 stmt: OUTPUT OC expr CC SCOL •

    $default  reduce using rule 32 (stmt)


State 174

   30 stmt: INPUT OC ID CC SCOL •

    $default  reduce using rule 30 (stmt)


State 175

   31 stmt: INPUT OC ID OS expr • CS CC SCOL
   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    CS          shift, and go to state 185


State 176

  109 switch_stmt: SWITCH $@15 OC ID $@16 • CC OF case_stmt_list $@17 default_stmt CF

    CC  shift, and go to state 186


State 177

   96 if_stmt: IF $@6 OC expr CC • $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 93 ($@7)

    $@7  go to state 187


State 178

  120 while_loop_stmt: WHILE $@20 OC expr CC • $@21 OF $@22 stmt_list CF

    $default  reduce using rule 118 ($@21)

    $@21  go to state 188


State 179

  125 for_loop_stmt: FOR OC assign SCOL $@23 • expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 189
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 180

   40 declaration: data_type ID OS INT_NUM CS • SCOL
   42            | data_type ID OS INT_NUM CS • ASSIGN $@4 OF arr_values CF SCOL

    SCOL    shift, and go to state 190
    ASSIGN  shift, and go to state 191


State 181

   39 declaration: data_type ID ASSIGN expr SCOL •

    $default  reduce using rule 39 (declaration)


State 182

   14 param_list: param $@3 COMMA param_list •

    $default  reduce using rule 14 (param_list)


State 183

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
   89 assign: ID OS expr CS ASSIGN expr •

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98

    $default  reduce using rule 89 (assign)


State 184

  128 arg_list: arg COMMA arg_list •

    $default  reduce using rule 128 (arg_list)


State 185

   31 stmt: INPUT OC ID OS expr CS • CC SCOL

    CC  shift, and go to state 192


State 186

  109 switch_stmt: SWITCH $@15 OC ID $@16 CC • OF case_stmt_list $@17 default_stmt CF

    OF  shift, and go to state 193


State 187

   96 if_stmt: IF $@6 OC expr CC $@7 • OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OF  shift, and go to state 194


State 188

  120 while_loop_stmt: WHILE $@20 OC expr CC $@21 • OF $@22 stmt_list CF

    OF  shift, and go to state 195


State 189

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
  125 for_loop_stmt: FOR OC assign SCOL $@23 expr • SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    SCOL        shift, and go to state 196


State 190

   40 declaration: data_type ID OS INT_NUM CS SCOL •

    $default  reduce using rule 40 (declaration)


State 191

   42 declaration: data_type ID OS INT_NUM CS ASSIGN • $@4 OF arr_values CF SCOL

    $default  reduce using rule 41 ($@4)

    $@4  go to state 197


State 192

   31 stmt: INPUT OC ID OS expr CS CC • SCOL

    SCOL  shift, and go to state 198


State 193

  109 switch_stmt: SWITCH $@15 OC ID $@16 CC OF • case_stmt_list $@17 default_stmt CF

    CASE  shift, and go to state 199

    $default  reduce using rule 111 (case_stmt_list)

    case_stmt_list  go to state 200
    case_stmt       go to state 201


State 194

   96 if_stmt: IF $@6 OC expr CC $@7 OF • $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 94 ($@8)

    $@8  go to state 202


State 195

  120 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF • $@22 stmt_list CF

    $default  reduce using rule 119 ($@22)

    $@22  go to state 203


State 196

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL • $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 122 ($@24)

    $@24  go to state 204


State 197

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 • OF arr_values CF SCOL

    OF  shift, and go to state 205


State 198

   31 stmt: INPUT OC ID OS expr CS CC SCOL •

    $default  reduce using rule 31 (stmt)


State 199

  114 case_stmt: CASE • $@18 OC const $@19 CC COLON stmt_list

    $default  reduce using rule 112 ($@18)

    $@18  go to state 206


State 200

  109 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list • $@17 default_stmt CF

    $default  reduce using rule 108 ($@17)

    $@17  go to state 207


State 201

  110 case_stmt_list: case_stmt • case_stmt_list

    CASE  shift, and go to state 199

    $default  reduce using rule 111 (case_stmt_list)

    case_stmt_list  go to state 208
    case_stmt       go to state 201


State 202

   96 if_stmt: IF $@6 OC expr CC $@7 OF $@8 • stmt_list CF $@9 elif_stmt else_stmt

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 209
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 203

  120 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 210
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 204

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 • assign CC $@25 OF $@26 stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    declaration   go to state 119
    data_type     go to state 46
    expr          go to state 120
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    assign        go to state 211
    func_call     go to state 58


State 205

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF • arr_values CF SCOL

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    CHARACTER  shift, and go to state 31

    arr_values  go to state 212
    const       go to state 213


State 206

  114 case_stmt: CASE $@18 • OC const $@19 CC COLON stmt_list

    OC  shift, and go to state 214


State 207

  109 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 • default_stmt CF

    DEFAULT  shift, and go to state 215

    $default  reduce using rule 116 (default_stmt)

    default_stmt  go to state 216


State 208

  110 case_stmt_list: case_stmt case_stmt_list •

    $default  reduce using rule 110 (case_stmt_list)


State 209

   96 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list • CF $@9 elif_stmt else_stmt

    CF  shift, and go to state 217


State 210

  120 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list • CF

    CF  shift, and go to state 218


State 211

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign • CC $@25 OF $@26 stmt_list CF

    CC  shift, and go to state 219


State 212

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values • CF SCOL

    CF  shift, and go to state 220


State 213

   44 arr_values: const • $@5 COMMA arr_values
   45           | const •

    CF        reduce using rule 45 (arr_values)
    $default  reduce using rule 43 ($@5)

    $@5  go to state 221


State 214

  114 case_stmt: CASE $@18 OC • const $@19 CC COLON stmt_list

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    CHARACTER  shift, and go to state 31

    const  go to state 222


State 215

  115 default_stmt: DEFAULT • COLON stmt_list

    COLON  shift, and go to state 223


State 216

  109 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt • CF

    CF  shift, and go to state 224


State 217

   96 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF • $@9 elif_stmt else_stmt

    $default  reduce using rule 95 ($@9)

    $@9  go to state 225


State 218

  120 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF •

    $default  reduce using rule 120 (while_loop_stmt)


State 219

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC • $@25 OF $@26 stmt_list CF

    $default  reduce using rule 123 ($@25)

    $@25  go to state 226


State 220

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF • SCOL

    SCOL  shift, and go to state 227


State 221

   44 arr_values: const $@5 • COMMA arr_values

    COMMA  shift, and go to state 228


State 222

  114 case_stmt: CASE $@18 OC const • $@19 CC COLON stmt_list

    $default  reduce using rule 113 ($@19)

    $@19  go to state 229


State 223

  115 default_stmt: DEFAULT COLON • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 230
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 224

  109 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF •

    $default  reduce using rule 109 (switch_stmt)


State 225

   96 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 • elif_stmt else_stmt

    ELIF  shift, and go to state 231

    $default  reduce using rule 102 (elif_stmt)

    elif_stmt  go to state 232


State 226

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 • OF $@26 stmt_list CF

    OF  shift, and go to state 233


State 227

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL •

    $default  reduce using rule 42 (declaration)


State 228

   44 arr_values: const $@5 COMMA • arr_values

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    CHARACTER  shift, and go to state 31

    arr_values  go to state 234
    const       go to state 213


State 229

  114 case_stmt: CASE $@18 OC const $@19 • CC COLON stmt_list

    CC  shift, and go to state 235


State 230

  115 default_stmt: DEFAULT COLON stmt_list •

    $default  reduce using rule 115 (default_stmt)


State 231

  101 elif_stmt: ELIF • $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 97 ($@10)

    $@10  go to state 236


State 232

   96 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt • else_stmt

    ELSE  shift, and go to state 237

    $default  reduce using rule 105 (else_stmt)

    else_stmt  go to state 238


State 233

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF • $@26 stmt_list CF

    $default  reduce using rule 124 ($@26)

    $@26  go to state 239


State 234

   44 arr_values: const $@5 COMMA arr_values •

    $default  reduce using rule 44 (arr_values)


State 235

  114 case_stmt: CASE $@18 OC const $@19 CC • COLON stmt_list

    COLON  shift, and go to state 240


State 236

  101 elif_stmt: ELIF $@10 • OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    OC  shift, and go to state 241


State 237

  104 else_stmt: ELSE • OF $@14 stmt_list CF

    OF  shift, and go to state 242


State 238

   96 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt •

    $default  reduce using rule 96 (if_stmt)


State 239

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 243
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 240

  114 case_stmt: CASE $@18 OC const $@19 CC COLON • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 244
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 241

  101 elif_stmt: ELIF $@10 OC • expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 61
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32

    expr          go to state 245
    postfix_expr  go to state 48
    unary_expr    go to state 49
    primary_expr  go to state 50
    unary_op      go to state 51
    const         go to state 52
    func_call     go to state 58


State 242

  104 else_stmt: ELSE OF • $@14 stmt_list CF

    $default  reduce using rule 103 ($@14)

    $@14  go to state 246


State 243

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list • CF

    CF  shift, and go to state 247


State 244

  114 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list •

    $default  reduce using rule 114 (case_stmt)


State 245

   53 expr: expr • ADD expr
   54     | expr • SUBTRACT expr
   55     | expr • MULTIPLY expr
   56     | expr • DIVIDE expr
   57     | expr • LE expr
   58     | expr • GE expr
   59     | expr • LT expr
   60     | expr • GT expr
   61     | expr • EQ expr
   62     | expr • NE expr
   63     | expr • AND expr
   64     | expr • OR expr
   65     | expr • MODULO expr
   66     | expr • BITAND expr
   67     | expr • BITOR expr
   68     | expr • XOR expr
   69     | expr • LEFTSHIFT expr
   70     | expr • RIGHTSHIFT expr
   74     | expr • ADD ADD
  101 elif_stmt: ELIF $@10 OC expr • CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    LEFTSHIFT   shift, and go to state 81
    RIGHTSHIFT  shift, and go to state 82
    LE          shift, and go to state 83
    GE          shift, and go to state 84
    EQ          shift, and go to state 85
    NE          shift, and go to state 86
    GT          shift, and go to state 87
    LT          shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    ADD         shift, and go to state 91
    SUBTRACT    shift, and go to state 92
    DIVIDE      shift, and go to state 93
    MULTIPLY    shift, and go to state 94
    MODULO      shift, and go to state 95
    BITAND      shift, and go to state 96
    BITOR       shift, and go to state 97
    XOR         shift, and go to state 98
    CC          shift, and go to state 248


State 246

  104 else_stmt: ELSE OF $@14 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 249
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 247

  125 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF •

    $default  reduce using rule 125 (for_loop_stmt)


State 248

  101 elif_stmt: ELIF $@10 OC expr CC • $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 98 ($@11)

    $@11  go to state 250


State 249

  104 else_stmt: ELSE OF $@14 stmt_list • CF

    CF  shift, and go to state 251


State 250

  101 elif_stmt: ELIF $@10 OC expr CC $@11 • OF $@12 stmt_list CF $@13 elif_stmt

    OF  shift, and go to state 252


State 251

  104 else_stmt: ELSE OF $@14 stmt_list CF •

    $default  reduce using rule 104 (else_stmt)


State 252

  101 elif_stmt: ELIF $@10 OC expr CC $@11 OF • $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 99 ($@12)

    $@12  go to state 253


State 253

  101 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 • stmt_list CF $@13 elif_stmt

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 22
    RETURN     shift, and go to state 23
    INT_NUM    shift, and go to state 24
    FLOAT_NUM  shift, and go to state 25
    ID         shift, and go to state 26
    NOT        shift, and go to state 27
    ADD        shift, and go to state 28
    SUBTRACT   shift, and go to state 29
    NEGATION   shift, and go to state 30
    CHARACTER  shift, and go to state 31
    OC         shift, and go to state 32
    OUTPUT     shift, and go to state 33
    INPUT      shift, and go to state 34
    SWITCH     shift, and go to state 35
    BREAK      shift, and go to state 36
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    FOR        shift, and go to state 39
    CONTINUE   shift, and go to state 40
    TYPEOF     shift, and go to state 41

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 254
    stmt             go to state 43
    declaration      go to state 44
    return_stmt      go to state 45
    data_type        go to state 46
    expr             go to state 47
    postfix_expr     go to state 48
    unary_expr       go to state 49
    primary_expr     go to state 50
    unary_op         go to state 51
    const            go to state 52
    assign           go to state 53
    if_stmt          go to state 54
    switch_stmt      go to state 55
    while_loop_stmt  go to state 56
    for_loop_stmt    go to state 57
    func_call        go to state 58


State 254

  101 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list • CF $@13 elif_stmt

    CF  shift, and go to state 255


State 255

  101 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF • $@13 elif_stmt

    $default  reduce using rule 100 ($@13)

    $@13  go to state 256


State 256

  101 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 • elif_stmt

    ELIF  shift, and go to state 231

    $default  reduce using rule 102 (elif_stmt)

    elif_stmt  go to state 257


State 257

  101 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt •

    $default  reduce using rule 101 (elif_stmt)
