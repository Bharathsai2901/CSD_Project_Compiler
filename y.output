State 23 conflicts: 1 shift/reduce
State 45 conflicts: 1 reduce/reduce
State 48 conflicts: 1 shift/reduce


Grammar

    0 $accept: Code $end

    1 Code: headerfileInclude Program

    2 headerfileInclude: INCLUDE HEADERFILE headerfileInclude
    3                  | ε

    4 Program: func_list

    5 func_list: func_list func
    6          | ε

    7 $@1: ε

    8 func: func_prefix OF $@1 stmt_list CF

    9 $@2: ε

   10 func_prefix: func_data_type ID $@2 OC param_list CC

   11 func_data_type: data_type
   12               | VOID

   13 $@3: ε

   14 param_list: param $@3 COMMA param_list
   15           | param
   16           | ε

   17 param: data_type ID

   18 stmt_list: stmt stmt_list
   19          | ε

   20 stmt: declaration
   21     | assign SCOL
   22     | expr SCOL
   23     | return_stmt SCOL
   24     | if_stmt
   25     | while_loop_stmt
   26     | for_loop_stmt
   27     | BREAK SCOL
   28     | CONTINUE SCOL
   29     | switch_stmt
   30     | INPUT OC ID CC SCOL
   31     | INPUT OC ID OS expr CS CC SCOL
   32     | OUTPUT OC expr CC SCOL
   33     | OUTPUT OC STR CC SCOL
   34     | TYPEOF ID SCOL

   35 declaration: data_type ID SCOL
   36            | STRING ID SCOL
   37            | STRING ID ASSIGN STR SCOL
   38            | STRING ID ASSIGN expr SCOL
   39            | data_type ID ASSIGN expr SCOL
   40            | data_type ID OS INT_NUM CS SCOL

   41 $@4: ε

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

   43 $@5: ε

   44 arr_values: const $@5 COMMA arr_values
   45           | const

   46 return_stmt: RETURN expr
   47            | RETURN STR
   48            | ε

   49 data_type: INT
   50          | FLOAT
   51          | STRING
   52          | CHAR
   53          | BOOL

   54 expr: expr ADD expr
   55     | expr SUBTRACT expr
   56     | expr MULTIPLY expr
   57     | expr DIVIDE expr
   58     | expr LE expr
   59     | expr GE expr
   60     | expr LT expr
   61     | expr GT expr
   62     | expr EQ expr
   63     | expr NE expr
   64     | expr AND expr
   65     | expr OR expr
   66     | expr MODULO expr
   67     | expr BITAND expr
   68     | expr BITOR expr
   69     | expr XOR expr
   70     | expr LEFTSHIFT expr
   71     | expr RIGHTSHIFT expr
   72     | unary_expr
   73     | primary_expr
   74     | postfix_expr
   75     | expr ADD ADD

   76 postfix_expr: func_call
   77             | ID OS expr CS

   78 unary_expr: unary_op primary_expr

   79 primary_expr: ID
   80             | const
   81             | OC expr CC

   82 unary_op: ADD
   83         | SUBTRACT
   84         | NOT
   85         | NEGATION

   86 const: INT_NUM
   87      | FLOAT_NUM
   88      | CHARACTER

   89 assign: ID ASSIGN expr
   90       | ID OS expr CS ASSIGN expr
   91       | expr
   92       | declaration

   93 $@6: ε

   94 $@7: ε

   95 $@8: ε

   96 $@9: ε

   97 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

   98 $@10: ε

   99 $@11: ε

  100 $@12: ε

  101 $@13: ε

  102 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt
  103          | ε

  104 $@14: ε

  105 else_stmt: ELSE OF $@14 stmt_list CF
  106          | ε

  107 $@15: ε

  108 $@16: ε

  109 $@17: ε

  110 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

  111 case_stmt_list: case_stmt case_stmt_list
  112               | ε

  113 $@18: ε

  114 $@19: ε

  115 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list

  116 default_stmt: DEFAULT COLON stmt_list
  117             | ε

  118 $@20: ε

  119 $@21: ε

  120 $@22: ε

  121 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF

  122 $@23: ε

  123 $@24: ε

  124 $@25: ε

  125 $@26: ε

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

  127 $@27: ε

  128 func_call: ID $@27 OC arg_list CC

  129 arg_list: arg COMMA arg_list
  130         | arg
  131         | ε

  132 arg: expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INCLUDE <node> (258) 2
    HEADERFILE <node> (259) 2
    INT <node> (260) 49
    CHAR <node> (261) 52
    FLOAT <node> (262) 50
    STRING <node> (263) 36 37 38 51
    BOOL <node> (264) 53
    VOID <node> (265) 12
    RETURN <node> (266) 46 47
    INT_NUM <node> (267) 40 42 86
    FLOAT_NUM <node> (268) 87
    ID <node> (269) 10 17 30 31 34 35 36 37 38 39 40 42 77 79 89 90 110 128
    LEFTSHIFT <node> (270) 70
    RIGHTSHIFT <node> (271) 71
    LE <node> (272) 58
    GE <node> (273) 59
    EQ <node> (274) 62
    NE <node> (275) 63
    GT <node> (276) 61
    LT <node> (277) 60
    AND <node> (278) 64
    OR <node> (279) 65
    NOT <node> (280) 84
    ADD <node> (281) 54 75 82
    SUBTRACT <node> (282) 55 83
    DIVIDE <node> (283) 57
    MULTIPLY <node> (284) 56
    MODULO <node> (285) 66
    BITAND <node> (286) 67
    BITOR <node> (287) 68
    NEGATION <node> (288) 85
    XOR <node> (289) 69
    STR <node> (290) 33 37 47
    CHARACTER <node> (291) 88
    CC <node> (292) 10 30 31 32 33 81 97 102 110 115 121 126 128
    OC <node> (293) 10 30 31 32 33 81 97 102 110 115 121 126 128
    CS <node> (294) 31 40 42 77 90
    OS <node> (295) 31 40 42 77 90
    CF <node> (296) 8 42 97 102 105 110 121 126
    OF <node> (297) 8 42 97 102 105 110 121 126
    COMMA <node> (298) 14 44 129
    COLON <node> (299) 115 116
    SCOL <node> (300) 21 22 23 27 28 30 31 32 33 34 35 36 37 38 39 40 42 126
    OUTPUT <node> (301) 32 33
    INPUT <node> (302) 30 31
    SWITCH <node> (303) 110
    CASE <node> (304) 115
    BREAK <node> (305) 27
    DEFAULT <node> (306) 116
    IF <node> (307) 97
    ELIF <node> (308) 102
    ELSE <node> (309) 105
    WHILE <node> (310) 121
    FOR <node> (311) 126
    CONTINUE <node> (312) 28
    TYPEOF <node> (313) 34
    ASSIGN (314) 37 38 39 42 89 90


Nonterminals, with rules where they appear

    $accept (60)
        on left: 0
    Code (61)
        on left: 1
        on right: 0
    headerfileInclude <node> (62)
        on left: 2 3
        on right: 1 2
    Program <node> (63)
        on left: 4
        on right: 1
    func_list <node> (64)
        on left: 5 6
        on right: 4 5
    func <node> (65)
        on left: 8
        on right: 5
    $@1 (66)
        on left: 7
        on right: 8
    func_prefix <node> (67)
        on left: 10
        on right: 8
    $@2 (68)
        on left: 9
        on right: 10
    func_data_type <node> (69)
        on left: 11 12
        on right: 10
    param_list <node> (70)
        on left: 14 15 16
        on right: 10 14
    $@3 (71)
        on left: 13
        on right: 14
    param <node> (72)
        on left: 17
        on right: 14 15
    stmt_list <node> (73)
        on left: 18 19
        on right: 8 18 97 102 105 115 116 121 126
    stmt <node> (74)
        on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
        on right: 18
    declaration <node> (75)
        on left: 35 36 37 38 39 40 42
        on right: 20 92
    $@4 (76)
        on left: 41
        on right: 42
    arr_values (77)
        on left: 44 45
        on right: 42 44
    $@5 (78)
        on left: 43
        on right: 44
    return_stmt <node> (79)
        on left: 46 47 48
        on right: 23
    data_type <node> (80)
        on left: 49 50 51 52 53
        on right: 11 17 35 39 40 42
    expr <node> (81)
        on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
        on right: 22 31 32 38 39 46 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 75 77 81 89 90 91 97 102 121 126 132
    postfix_expr <node> (82)
        on left: 76 77
        on right: 74
    unary_expr <node> (83)
        on left: 78
        on right: 72
    primary_expr <node> (84)
        on left: 79 80 81
        on right: 73 78
    unary_op <node> (85)
        on left: 82 83 84 85
        on right: 78
    const <node> (86)
        on left: 86 87 88
        on right: 44 45 80 115
    assign <node> (87)
        on left: 89 90 91 92
        on right: 21 126
    if_stmt <node> (88)
        on left: 97
        on right: 24
    $@6 (89)
        on left: 93
        on right: 97
    $@7 (90)
        on left: 94
        on right: 97
    $@8 (91)
        on left: 95
        on right: 97
    $@9 (92)
        on left: 96
        on right: 97
    elif_stmt <node> (93)
        on left: 102 103
        on right: 97 102
    $@10 (94)
        on left: 98
        on right: 102
    $@11 (95)
        on left: 99
        on right: 102
    $@12 (96)
        on left: 100
        on right: 102
    $@13 (97)
        on left: 101
        on right: 102
    else_stmt <node> (98)
        on left: 105 106
        on right: 97
    $@14 (99)
        on left: 104
        on right: 105
    switch_stmt <node> (100)
        on left: 110
        on right: 29
    $@15 (101)
        on left: 107
        on right: 110
    $@16 (102)
        on left: 108
        on right: 110
    $@17 (103)
        on left: 109
        on right: 110
    case_stmt_list <node> (104)
        on left: 111 112
        on right: 110 111
    case_stmt <node> (105)
        on left: 115
        on right: 111
    $@18 (106)
        on left: 113
        on right: 115
    $@19 (107)
        on left: 114
        on right: 115
    default_stmt (108)
        on left: 116 117
        on right: 110
    while_loop_stmt <node> (109)
        on left: 121
        on right: 25
    $@20 (110)
        on left: 118
        on right: 121
    $@21 (111)
        on left: 119
        on right: 121
    $@22 (112)
        on left: 120
        on right: 121
    for_loop_stmt <node> (113)
        on left: 126
        on right: 26
    $@23 (114)
        on left: 122
        on right: 126
    $@24 (115)
        on left: 123
        on right: 126
    $@25 (116)
        on left: 124
        on right: 126
    $@26 (117)
        on left: 125
        on right: 126
    func_call <node> (118)
        on left: 128
        on right: 76
    $@27 (119)
        on left: 127
        on right: 128
    arg_list <node> (120)
        on left: 129 130 131
        on right: 128 129
    arg <node> (121)
        on left: 132
        on right: 129 130


State 0

    0 $accept: • Code $end

    INCLUDE  shift, and go to state 1

    $default  reduce using rule 3 (headerfileInclude)

    Code               go to state 2
    headerfileInclude  go to state 3


State 1

    2 headerfileInclude: INCLUDE • HEADERFILE headerfileInclude

    HEADERFILE  shift, and go to state 4


State 2

    0 $accept: Code • $end

    $end  shift, and go to state 5


State 3

    1 Code: headerfileInclude • Program

    $default  reduce using rule 6 (func_list)

    Program    go to state 6
    func_list  go to state 7


State 4

    2 headerfileInclude: INCLUDE HEADERFILE • headerfileInclude

    INCLUDE  shift, and go to state 1

    $default  reduce using rule 3 (headerfileInclude)

    headerfileInclude  go to state 8


State 5

    0 $accept: Code $end •

    $default  accept


State 6

    1 Code: headerfileInclude Program •

    $default  reduce using rule 1 (Code)


State 7

    4 Program: func_list •
    5 func_list: func_list • func

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13
    VOID    shift, and go to state 14

    $default  reduce using rule 4 (Program)

    func            go to state 15
    func_prefix     go to state 16
    func_data_type  go to state 17
    data_type       go to state 18


State 8

    2 headerfileInclude: INCLUDE HEADERFILE headerfileInclude •

    $default  reduce using rule 2 (headerfileInclude)


State 9

   49 data_type: INT •

    $default  reduce using rule 49 (data_type)


State 10

   52 data_type: CHAR •

    $default  reduce using rule 52 (data_type)


State 11

   50 data_type: FLOAT •

    $default  reduce using rule 50 (data_type)


State 12

   51 data_type: STRING •

    $default  reduce using rule 51 (data_type)


State 13

   53 data_type: BOOL •

    $default  reduce using rule 53 (data_type)


State 14

   12 func_data_type: VOID •

    $default  reduce using rule 12 (func_data_type)


State 15

    5 func_list: func_list func •

    $default  reduce using rule 5 (func_list)


State 16

    8 func: func_prefix • OF $@1 stmt_list CF

    OF  shift, and go to state 19


State 17

   10 func_prefix: func_data_type • ID $@2 OC param_list CC

    ID  shift, and go to state 20


State 18

   11 func_data_type: data_type •

    $default  reduce using rule 11 (func_data_type)


State 19

    8 func: func_prefix OF • $@1 stmt_list CF

    $default  reduce using rule 7 ($@1)

    $@1  go to state 21


State 20

   10 func_prefix: func_data_type ID • $@2 OC param_list CC

    $default  reduce using rule 9 ($@2)

    $@2  go to state 22


State 21

    8 func: func_prefix OF $@1 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 43
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 22

   10 func_prefix: func_data_type ID $@2 • OC param_list CC

    OC  shift, and go to state 60


State 23

   36 declaration: STRING • ID SCOL
   37            | STRING • ID ASSIGN STR SCOL
   38            | STRING • ID ASSIGN expr SCOL
   51 data_type: STRING •

    ID  shift, and go to state 61

    ID  [reduce using rule 51 (data_type)]


State 24

   46 return_stmt: RETURN • expr
   47            | RETURN • STR

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 63
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 64
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 25

   86 const: INT_NUM •

    $default  reduce using rule 86 (const)


State 26

   87 const: FLOAT_NUM •

    $default  reduce using rule 87 (const)


State 27

   77 postfix_expr: ID • OS expr CS
   79 primary_expr: ID •
   89 assign: ID • ASSIGN expr
   90       | ID • OS expr CS ASSIGN expr
  128 func_call: ID • $@27 OC arg_list CC

    OS      shift, and go to state 65
    ASSIGN  shift, and go to state 66

    OC        reduce using rule 127 ($@27)
    $default  reduce using rule 79 (primary_expr)

    $@27  go to state 67


State 28

   84 unary_op: NOT •

    $default  reduce using rule 84 (unary_op)


State 29

   82 unary_op: ADD •

    $default  reduce using rule 82 (unary_op)


State 30

   83 unary_op: SUBTRACT •

    $default  reduce using rule 83 (unary_op)


State 31

   85 unary_op: NEGATION •

    $default  reduce using rule 85 (unary_op)


State 32

   88 const: CHARACTER •

    $default  reduce using rule 88 (const)


State 33

   81 primary_expr: OC • expr CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 68
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 34

   32 stmt: OUTPUT • OC expr CC SCOL
   33     | OUTPUT • OC STR CC SCOL

    OC  shift, and go to state 69


State 35

   30 stmt: INPUT • OC ID CC SCOL
   31     | INPUT • OC ID OS expr CS CC SCOL

    OC  shift, and go to state 70


State 36

  110 switch_stmt: SWITCH • $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 107 ($@15)

    $@15  go to state 71


State 37

   27 stmt: BREAK • SCOL

    SCOL  shift, and go to state 72


State 38

   97 if_stmt: IF • $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 93 ($@6)

    $@6  go to state 73


State 39

  121 while_loop_stmt: WHILE • $@20 OC expr CC $@21 OF $@22 stmt_list CF

    $default  reduce using rule 118 ($@20)

    $@20  go to state 74


State 40

  126 for_loop_stmt: FOR • OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    OC  shift, and go to state 75


State 41

   28 stmt: CONTINUE • SCOL

    SCOL  shift, and go to state 76


State 42

   34 stmt: TYPEOF • ID SCOL

    ID  shift, and go to state 77


State 43

    8 func: func_prefix OF $@1 stmt_list • CF

    CF  shift, and go to state 78


State 44

   18 stmt_list: stmt • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 79
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 45

   20 stmt: declaration •
   92 assign: declaration •

    SCOL      reduce using rule 20 (stmt)
    SCOL      [reduce using rule 92 (assign)]
    $default  reduce using rule 20 (stmt)


State 46

   23 stmt: return_stmt • SCOL

    SCOL  shift, and go to state 80


State 47

   35 declaration: data_type • ID SCOL
   39            | data_type • ID ASSIGN expr SCOL
   40            | data_type • ID OS INT_NUM CS SCOL
   42            | data_type • ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    ID  shift, and go to state 81


State 48

   22 stmt: expr • SCOL
   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
   91 assign: expr •

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    SCOL        shift, and go to state 100

    SCOL  [reduce using rule 91 (assign)]


State 49

   74 expr: postfix_expr •

    $default  reduce using rule 74 (expr)


State 50

   72 expr: unary_expr •

    $default  reduce using rule 72 (expr)


State 51

   73 expr: primary_expr •

    $default  reduce using rule 73 (expr)


State 52

   78 unary_expr: unary_op • primary_expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 101
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    primary_expr  go to state 102
    const         go to state 53


State 53

   80 primary_expr: const •

    $default  reduce using rule 80 (primary_expr)


State 54

   21 stmt: assign • SCOL

    SCOL  shift, and go to state 103


State 55

   24 stmt: if_stmt •

    $default  reduce using rule 24 (stmt)


State 56

   29 stmt: switch_stmt •

    $default  reduce using rule 29 (stmt)


State 57

   25 stmt: while_loop_stmt •

    $default  reduce using rule 25 (stmt)


State 58

   26 stmt: for_loop_stmt •

    $default  reduce using rule 26 (stmt)


State 59

   76 postfix_expr: func_call •

    $default  reduce using rule 76 (postfix_expr)


State 60

   10 func_prefix: func_data_type ID $@2 OC • param_list CC

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    $default  reduce using rule 16 (param_list)

    param_list  go to state 104
    param       go to state 105
    data_type   go to state 106


State 61

   36 declaration: STRING ID • SCOL
   37            | STRING ID • ASSIGN STR SCOL
   38            | STRING ID • ASSIGN expr SCOL

    SCOL    shift, and go to state 107
    ASSIGN  shift, and go to state 108


State 62

   77 postfix_expr: ID • OS expr CS
   79 primary_expr: ID •
  128 func_call: ID • $@27 OC arg_list CC

    OS  shift, and go to state 109

    OC        reduce using rule 127 ($@27)
    $default  reduce using rule 79 (primary_expr)

    $@27  go to state 67


State 63

   47 return_stmt: RETURN STR •

    $default  reduce using rule 47 (return_stmt)


State 64

   46 return_stmt: RETURN expr •
   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99

    $default  reduce using rule 46 (return_stmt)


State 65

   77 postfix_expr: ID OS • expr CS
   90 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 110
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 66

   89 assign: ID ASSIGN • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 111
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 67

  128 func_call: ID $@27 • OC arg_list CC

    OC  shift, and go to state 112


State 68

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
   81 primary_expr: OC expr • CC

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    CC          shift, and go to state 113


State 69

   32 stmt: OUTPUT OC • expr CC SCOL
   33     | OUTPUT OC • STR CC SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 114
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 115
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 70

   30 stmt: INPUT OC • ID CC SCOL
   31     | INPUT OC • ID OS expr CS CC SCOL

    ID  shift, and go to state 116


State 71

  110 switch_stmt: SWITCH $@15 • OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    OC  shift, and go to state 117


State 72

   27 stmt: BREAK SCOL •

    $default  reduce using rule 27 (stmt)


State 73

   97 if_stmt: IF $@6 • OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OC  shift, and go to state 118


State 74

  121 while_loop_stmt: WHILE $@20 • OC expr CC $@21 OF $@22 stmt_list CF

    OC  shift, and go to state 119


State 75

  126 for_loop_stmt: FOR OC • assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    declaration   go to state 120
    data_type     go to state 47
    expr          go to state 121
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    assign        go to state 122
    func_call     go to state 59


State 76

   28 stmt: CONTINUE SCOL •

    $default  reduce using rule 28 (stmt)


State 77

   34 stmt: TYPEOF ID • SCOL

    SCOL  shift, and go to state 123


State 78

    8 func: func_prefix OF $@1 stmt_list CF •

    $default  reduce using rule 8 (func)


State 79

   18 stmt_list: stmt stmt_list •

    $default  reduce using rule 18 (stmt_list)


State 80

   23 stmt: return_stmt SCOL •

    $default  reduce using rule 23 (stmt)


State 81

   35 declaration: data_type ID • SCOL
   39            | data_type ID • ASSIGN expr SCOL
   40            | data_type ID • OS INT_NUM CS SCOL
   42            | data_type ID • OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    OS      shift, and go to state 124
    SCOL    shift, and go to state 125
    ASSIGN  shift, and go to state 126


State 82

   70 expr: expr LEFTSHIFT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 127
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 83

   71 expr: expr RIGHTSHIFT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 128
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 84

   58 expr: expr LE • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 129
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 85

   59 expr: expr GE • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 130
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 86

   62 expr: expr EQ • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 131
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 87

   63 expr: expr NE • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 132
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 88

   61 expr: expr GT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 133
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 89

   60 expr: expr LT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 134
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 90

   64 expr: expr AND • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 135
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 91

   65 expr: expr OR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 136
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 92

   54 expr: expr ADD • expr
   75     | expr ADD • ADD

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 137
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 138
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 93

   55 expr: expr SUBTRACT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 139
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 94

   57 expr: expr DIVIDE • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 140
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 95

   56 expr: expr MULTIPLY • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 141
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 96

   66 expr: expr MODULO • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 142
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 97

   67 expr: expr BITAND • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 143
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 98

   68 expr: expr BITOR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 144
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 99

   69 expr: expr XOR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 145
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 100

   22 stmt: expr SCOL •

    $default  reduce using rule 22 (stmt)


State 101

   79 primary_expr: ID •

    $default  reduce using rule 79 (primary_expr)


State 102

   78 unary_expr: unary_op primary_expr •

    $default  reduce using rule 78 (unary_expr)


State 103

   21 stmt: assign SCOL •

    $default  reduce using rule 21 (stmt)


State 104

   10 func_prefix: func_data_type ID $@2 OC param_list • CC

    CC  shift, and go to state 146


State 105

   14 param_list: param • $@3 COMMA param_list
   15           | param •

    CC        reduce using rule 15 (param_list)
    $default  reduce using rule 13 ($@3)

    $@3  go to state 147


State 106

   17 param: data_type • ID

    ID  shift, and go to state 148


State 107

   36 declaration: STRING ID SCOL •

    $default  reduce using rule 36 (declaration)


State 108

   37 declaration: STRING ID ASSIGN • STR SCOL
   38            | STRING ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 149
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 150
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 109

   77 postfix_expr: ID OS • expr CS

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 151
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 110

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
   77 postfix_expr: ID OS expr • CS
   90 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    CS          shift, and go to state 152


State 111

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
   89 assign: ID ASSIGN expr •

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99

    $default  reduce using rule 89 (assign)


State 112

  128 func_call: ID $@27 OC • arg_list CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    $default  reduce using rule 131 (arg_list)

    expr          go to state 153
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59
    arg_list      go to state 154
    arg           go to state 155


State 113

   81 primary_expr: OC expr CC •

    $default  reduce using rule 81 (primary_expr)


State 114

   33 stmt: OUTPUT OC STR • CC SCOL

    CC  shift, and go to state 156


State 115

   32 stmt: OUTPUT OC expr • CC SCOL
   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    CC          shift, and go to state 157


State 116

   30 stmt: INPUT OC ID • CC SCOL
   31     | INPUT OC ID • OS expr CS CC SCOL

    CC  shift, and go to state 158
    OS  shift, and go to state 159


State 117

  110 switch_stmt: SWITCH $@15 OC • ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    ID  shift, and go to state 160


State 118

   97 if_stmt: IF $@6 OC • expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 161
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 119

  121 while_loop_stmt: WHILE $@20 OC • expr CC $@21 OF $@22 stmt_list CF

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 162
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 120

   92 assign: declaration •

    $default  reduce using rule 92 (assign)


State 121

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
   91 assign: expr •

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99

    $default  reduce using rule 91 (assign)


State 122

  126 for_loop_stmt: FOR OC assign • SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    SCOL  shift, and go to state 163


State 123

   34 stmt: TYPEOF ID SCOL •

    $default  reduce using rule 34 (stmt)


State 124

   40 declaration: data_type ID OS • INT_NUM CS SCOL
   42            | data_type ID OS • INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    INT_NUM  shift, and go to state 164


State 125

   35 declaration: data_type ID SCOL •

    $default  reduce using rule 35 (declaration)


State 126

   39 declaration: data_type ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 165
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 127

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   70     | expr LEFTSHIFT expr •
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    ADD       shift, and go to state 92
    SUBTRACT  shift, and go to state 93
    DIVIDE    shift, and go to state 94
    MULTIPLY  shift, and go to state 95
    MODULO    shift, and go to state 96

    $default  reduce using rule 70 (expr)


State 128

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   71     | expr RIGHTSHIFT expr •
   75     | expr • ADD ADD

    ADD       shift, and go to state 92
    SUBTRACT  shift, and go to state 93
    DIVIDE    shift, and go to state 94
    MULTIPLY  shift, and go to state 95
    MODULO    shift, and go to state 96

    $default  reduce using rule 71 (expr)


State 129

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   58     | expr LE expr •
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96

    $default  reduce using rule 58 (expr)


State 130

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   59     | expr GE expr •
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96

    $default  reduce using rule 59 (expr)


State 131

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   62     | expr EQ expr •
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96

    $default  reduce using rule 62 (expr)


State 132

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   63     | expr NE expr •
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96

    $default  reduce using rule 63 (expr)


State 133

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   61     | expr GT expr •
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96

    $default  reduce using rule 61 (expr)


State 134

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   60     | expr LT expr •
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96

    $default  reduce using rule 60 (expr)


State 135

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   64     | expr AND expr •
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99

    $default  reduce using rule 64 (expr)


State 136

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   65     | expr OR expr •
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99

    $default  reduce using rule 65 (expr)


State 137

   75 expr: expr ADD ADD •
   82 unary_op: ADD •

    INT_NUM    reduce using rule 82 (unary_op)
    FLOAT_NUM  reduce using rule 82 (unary_op)
    ID         reduce using rule 82 (unary_op)
    CHARACTER  reduce using rule 82 (unary_op)
    OC         reduce using rule 82 (unary_op)
    $default   reduce using rule 75 (expr)


State 138

   54 expr: expr • ADD expr
   54     | expr ADD expr •
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    DIVIDE    shift, and go to state 94
    MULTIPLY  shift, and go to state 95
    MODULO    shift, and go to state 96

    $default  reduce using rule 54 (expr)


State 139

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   55     | expr SUBTRACT expr •
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    DIVIDE    shift, and go to state 94
    MULTIPLY  shift, and go to state 95
    MODULO    shift, and go to state 96

    $default  reduce using rule 55 (expr)


State 140

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   57     | expr DIVIDE expr •
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    $default  reduce using rule 57 (expr)


State 141

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   56     | expr MULTIPLY expr •
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    $default  reduce using rule 56 (expr)


State 142

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   66     | expr MODULO expr •
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    $default  reduce using rule 66 (expr)


State 143

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   67     | expr BITAND expr •
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96

    $default  reduce using rule 67 (expr)


State 144

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   68     | expr BITOR expr •
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    XOR         shift, and go to state 99

    $default  reduce using rule 68 (expr)


State 145

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   69     | expr XOR expr •
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97

    $default  reduce using rule 69 (expr)


State 146

   10 func_prefix: func_data_type ID $@2 OC param_list CC •

    $default  reduce using rule 10 (func_prefix)


State 147

   14 param_list: param $@3 • COMMA param_list

    COMMA  shift, and go to state 166


State 148

   17 param: data_type ID •

    $default  reduce using rule 17 (param)


State 149

   37 declaration: STRING ID ASSIGN STR • SCOL

    SCOL  shift, and go to state 167


State 150

   38 declaration: STRING ID ASSIGN expr • SCOL
   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    SCOL        shift, and go to state 168


State 151

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
   77 postfix_expr: ID OS expr • CS

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    CS          shift, and go to state 169


State 152

   77 postfix_expr: ID OS expr CS •
   90 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 170

    $default  reduce using rule 77 (postfix_expr)


State 153

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
  132 arg: expr •

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99

    $default  reduce using rule 132 (arg)


State 154

  128 func_call: ID $@27 OC arg_list • CC

    CC  shift, and go to state 171


State 155

  129 arg_list: arg • COMMA arg_list
  130         | arg •

    COMMA  shift, and go to state 172

    $default  reduce using rule 130 (arg_list)


State 156

   33 stmt: OUTPUT OC STR CC • SCOL

    SCOL  shift, and go to state 173


State 157

   32 stmt: OUTPUT OC expr CC • SCOL

    SCOL  shift, and go to state 174


State 158

   30 stmt: INPUT OC ID CC • SCOL

    SCOL  shift, and go to state 175


State 159

   31 stmt: INPUT OC ID OS • expr CS CC SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 176
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 160

  110 switch_stmt: SWITCH $@15 OC ID • $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 108 ($@16)

    $@16  go to state 177


State 161

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
   97 if_stmt: IF $@6 OC expr • CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    CC          shift, and go to state 178


State 162

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
  121 while_loop_stmt: WHILE $@20 OC expr • CC $@21 OF $@22 stmt_list CF

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    CC          shift, and go to state 179


State 163

  126 for_loop_stmt: FOR OC assign SCOL • $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 122 ($@23)

    $@23  go to state 180


State 164

   40 declaration: data_type ID OS INT_NUM • CS SCOL
   42            | data_type ID OS INT_NUM • CS ASSIGN $@4 OF arr_values CF SCOL

    CS  shift, and go to state 181


State 165

   39 declaration: data_type ID ASSIGN expr • SCOL
   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    SCOL        shift, and go to state 182


State 166

   14 param_list: param $@3 COMMA • param_list

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    $default  reduce using rule 16 (param_list)

    param_list  go to state 183
    param       go to state 105
    data_type   go to state 106


State 167

   37 declaration: STRING ID ASSIGN STR SCOL •

    $default  reduce using rule 37 (declaration)


State 168

   38 declaration: STRING ID ASSIGN expr SCOL •

    $default  reduce using rule 38 (declaration)


State 169

   77 postfix_expr: ID OS expr CS •

    $default  reduce using rule 77 (postfix_expr)


State 170

   90 assign: ID OS expr CS ASSIGN • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 184
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 171

  128 func_call: ID $@27 OC arg_list CC •

    $default  reduce using rule 128 (func_call)


State 172

  129 arg_list: arg COMMA • arg_list

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    $default  reduce using rule 131 (arg_list)

    expr          go to state 153
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59
    arg_list      go to state 185
    arg           go to state 155


State 173

   33 stmt: OUTPUT OC STR CC SCOL •

    $default  reduce using rule 33 (stmt)


State 174

   32 stmt: OUTPUT OC expr CC SCOL •

    $default  reduce using rule 32 (stmt)


State 175

   30 stmt: INPUT OC ID CC SCOL •

    $default  reduce using rule 30 (stmt)


State 176

   31 stmt: INPUT OC ID OS expr • CS CC SCOL
   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    CS          shift, and go to state 186


State 177

  110 switch_stmt: SWITCH $@15 OC ID $@16 • CC OF case_stmt_list $@17 default_stmt CF

    CC  shift, and go to state 187


State 178

   97 if_stmt: IF $@6 OC expr CC • $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 94 ($@7)

    $@7  go to state 188


State 179

  121 while_loop_stmt: WHILE $@20 OC expr CC • $@21 OF $@22 stmt_list CF

    $default  reduce using rule 119 ($@21)

    $@21  go to state 189


State 180

  126 for_loop_stmt: FOR OC assign SCOL $@23 • expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 190
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 181

   40 declaration: data_type ID OS INT_NUM CS • SCOL
   42            | data_type ID OS INT_NUM CS • ASSIGN $@4 OF arr_values CF SCOL

    SCOL    shift, and go to state 191
    ASSIGN  shift, and go to state 192


State 182

   39 declaration: data_type ID ASSIGN expr SCOL •

    $default  reduce using rule 39 (declaration)


State 183

   14 param_list: param $@3 COMMA param_list •

    $default  reduce using rule 14 (param_list)


State 184

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
   90 assign: ID OS expr CS ASSIGN expr •

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99

    $default  reduce using rule 90 (assign)


State 185

  129 arg_list: arg COMMA arg_list •

    $default  reduce using rule 129 (arg_list)


State 186

   31 stmt: INPUT OC ID OS expr CS • CC SCOL

    CC  shift, and go to state 193


State 187

  110 switch_stmt: SWITCH $@15 OC ID $@16 CC • OF case_stmt_list $@17 default_stmt CF

    OF  shift, and go to state 194


State 188

   97 if_stmt: IF $@6 OC expr CC $@7 • OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OF  shift, and go to state 195


State 189

  121 while_loop_stmt: WHILE $@20 OC expr CC $@21 • OF $@22 stmt_list CF

    OF  shift, and go to state 196


State 190

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
  126 for_loop_stmt: FOR OC assign SCOL $@23 expr • SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    SCOL        shift, and go to state 197


State 191

   40 declaration: data_type ID OS INT_NUM CS SCOL •

    $default  reduce using rule 40 (declaration)


State 192

   42 declaration: data_type ID OS INT_NUM CS ASSIGN • $@4 OF arr_values CF SCOL

    $default  reduce using rule 41 ($@4)

    $@4  go to state 198


State 193

   31 stmt: INPUT OC ID OS expr CS CC • SCOL

    SCOL  shift, and go to state 199


State 194

  110 switch_stmt: SWITCH $@15 OC ID $@16 CC OF • case_stmt_list $@17 default_stmt CF

    CASE  shift, and go to state 200

    $default  reduce using rule 112 (case_stmt_list)

    case_stmt_list  go to state 201
    case_stmt       go to state 202


State 195

   97 if_stmt: IF $@6 OC expr CC $@7 OF • $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 95 ($@8)

    $@8  go to state 203


State 196

  121 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF • $@22 stmt_list CF

    $default  reduce using rule 120 ($@22)

    $@22  go to state 204


State 197

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL • $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 123 ($@24)

    $@24  go to state 205


State 198

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 • OF arr_values CF SCOL

    OF  shift, and go to state 206


State 199

   31 stmt: INPUT OC ID OS expr CS CC SCOL •

    $default  reduce using rule 31 (stmt)


State 200

  115 case_stmt: CASE • $@18 OC const $@19 CC COLON stmt_list

    $default  reduce using rule 113 ($@18)

    $@18  go to state 207


State 201

  110 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list • $@17 default_stmt CF

    $default  reduce using rule 109 ($@17)

    $@17  go to state 208


State 202

  111 case_stmt_list: case_stmt • case_stmt_list

    CASE  shift, and go to state 200

    $default  reduce using rule 112 (case_stmt_list)

    case_stmt_list  go to state 209
    case_stmt       go to state 202


State 203

   97 if_stmt: IF $@6 OC expr CC $@7 OF $@8 • stmt_list CF $@9 elif_stmt else_stmt

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 210
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 204

  121 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 211
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 205

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 • assign CC $@25 OF $@26 stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    declaration   go to state 120
    data_type     go to state 47
    expr          go to state 121
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    assign        go to state 212
    func_call     go to state 59


State 206

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF • arr_values CF SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    CHARACTER  shift, and go to state 32

    arr_values  go to state 213
    const       go to state 214


State 207

  115 case_stmt: CASE $@18 • OC const $@19 CC COLON stmt_list

    OC  shift, and go to state 215


State 208

  110 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 • default_stmt CF

    DEFAULT  shift, and go to state 216

    $default  reduce using rule 117 (default_stmt)

    default_stmt  go to state 217


State 209

  111 case_stmt_list: case_stmt case_stmt_list •

    $default  reduce using rule 111 (case_stmt_list)


State 210

   97 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list • CF $@9 elif_stmt else_stmt

    CF  shift, and go to state 218


State 211

  121 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list • CF

    CF  shift, and go to state 219


State 212

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign • CC $@25 OF $@26 stmt_list CF

    CC  shift, and go to state 220


State 213

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values • CF SCOL

    CF  shift, and go to state 221


State 214

   44 arr_values: const • $@5 COMMA arr_values
   45           | const •

    CF        reduce using rule 45 (arr_values)
    $default  reduce using rule 43 ($@5)

    $@5  go to state 222


State 215

  115 case_stmt: CASE $@18 OC • const $@19 CC COLON stmt_list

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    CHARACTER  shift, and go to state 32

    const  go to state 223


State 216

  116 default_stmt: DEFAULT • COLON stmt_list

    COLON  shift, and go to state 224


State 217

  110 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt • CF

    CF  shift, and go to state 225


State 218

   97 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF • $@9 elif_stmt else_stmt

    $default  reduce using rule 96 ($@9)

    $@9  go to state 226


State 219

  121 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF •

    $default  reduce using rule 121 (while_loop_stmt)


State 220

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC • $@25 OF $@26 stmt_list CF

    $default  reduce using rule 124 ($@25)

    $@25  go to state 227


State 221

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF • SCOL

    SCOL  shift, and go to state 228


State 222

   44 arr_values: const $@5 • COMMA arr_values

    COMMA  shift, and go to state 229


State 223

  115 case_stmt: CASE $@18 OC const • $@19 CC COLON stmt_list

    $default  reduce using rule 114 ($@19)

    $@19  go to state 230


State 224

  116 default_stmt: DEFAULT COLON • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 231
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 225

  110 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF •

    $default  reduce using rule 110 (switch_stmt)


State 226

   97 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 • elif_stmt else_stmt

    ELIF  shift, and go to state 232

    $default  reduce using rule 103 (elif_stmt)

    elif_stmt  go to state 233


State 227

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 • OF $@26 stmt_list CF

    OF  shift, and go to state 234


State 228

   42 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL •

    $default  reduce using rule 42 (declaration)


State 229

   44 arr_values: const $@5 COMMA • arr_values

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    CHARACTER  shift, and go to state 32

    arr_values  go to state 235
    const       go to state 214


State 230

  115 case_stmt: CASE $@18 OC const $@19 • CC COLON stmt_list

    CC  shift, and go to state 236


State 231

  116 default_stmt: DEFAULT COLON stmt_list •

    $default  reduce using rule 116 (default_stmt)


State 232

  102 elif_stmt: ELIF • $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 98 ($@10)

    $@10  go to state 237


State 233

   97 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt • else_stmt

    ELSE  shift, and go to state 238

    $default  reduce using rule 106 (else_stmt)

    else_stmt  go to state 239


State 234

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF • $@26 stmt_list CF

    $default  reduce using rule 125 ($@26)

    $@26  go to state 240


State 235

   44 arr_values: const $@5 COMMA arr_values •

    $default  reduce using rule 44 (arr_values)


State 236

  115 case_stmt: CASE $@18 OC const $@19 CC • COLON stmt_list

    COLON  shift, and go to state 241


State 237

  102 elif_stmt: ELIF $@10 • OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    OC  shift, and go to state 242


State 238

  105 else_stmt: ELSE • OF $@14 stmt_list CF

    OF  shift, and go to state 243


State 239

   97 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt •

    $default  reduce using rule 97 (if_stmt)


State 240

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 244
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 241

  115 case_stmt: CASE $@18 OC const $@19 CC COLON • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 245
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 242

  102 elif_stmt: ELIF $@10 OC • expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 62
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 246
    postfix_expr  go to state 49
    unary_expr    go to state 50
    primary_expr  go to state 51
    unary_op      go to state 52
    const         go to state 53
    func_call     go to state 59


State 243

  105 else_stmt: ELSE OF • $@14 stmt_list CF

    $default  reduce using rule 104 ($@14)

    $@14  go to state 247


State 244

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list • CF

    CF  shift, and go to state 248


State 245

  115 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list •

    $default  reduce using rule 115 (case_stmt)


State 246

   54 expr: expr • ADD expr
   55     | expr • SUBTRACT expr
   56     | expr • MULTIPLY expr
   57     | expr • DIVIDE expr
   58     | expr • LE expr
   59     | expr • GE expr
   60     | expr • LT expr
   61     | expr • GT expr
   62     | expr • EQ expr
   63     | expr • NE expr
   64     | expr • AND expr
   65     | expr • OR expr
   66     | expr • MODULO expr
   67     | expr • BITAND expr
   68     | expr • BITOR expr
   69     | expr • XOR expr
   70     | expr • LEFTSHIFT expr
   71     | expr • RIGHTSHIFT expr
   75     | expr • ADD ADD
  102 elif_stmt: ELIF $@10 OC expr • CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    LEFTSHIFT   shift, and go to state 82
    RIGHTSHIFT  shift, and go to state 83
    LE          shift, and go to state 84
    GE          shift, and go to state 85
    EQ          shift, and go to state 86
    NE          shift, and go to state 87
    GT          shift, and go to state 88
    LT          shift, and go to state 89
    AND         shift, and go to state 90
    OR          shift, and go to state 91
    ADD         shift, and go to state 92
    SUBTRACT    shift, and go to state 93
    DIVIDE      shift, and go to state 94
    MULTIPLY    shift, and go to state 95
    MODULO      shift, and go to state 96
    BITAND      shift, and go to state 97
    BITOR       shift, and go to state 98
    XOR         shift, and go to state 99
    CC          shift, and go to state 249


State 247

  105 else_stmt: ELSE OF $@14 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 250
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 248

  126 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF •

    $default  reduce using rule 126 (for_loop_stmt)


State 249

  102 elif_stmt: ELIF $@10 OC expr CC • $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 99 ($@11)

    $@11  go to state 251


State 250

  105 else_stmt: ELSE OF $@14 stmt_list • CF

    CF  shift, and go to state 252


State 251

  102 elif_stmt: ELIF $@10 OC expr CC $@11 • OF $@12 stmt_list CF $@13 elif_stmt

    OF  shift, and go to state 253


State 252

  105 else_stmt: ELSE OF $@14 stmt_list CF •

    $default  reduce using rule 105 (else_stmt)


State 253

  102 elif_stmt: ELIF $@10 OC expr CC $@11 OF • $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 100 ($@12)

    $@12  go to state 254


State 254

  102 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 • stmt_list CF $@13 elif_stmt

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OUTPUT     shift, and go to state 34
    INPUT      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    IF         shift, and go to state 38
    WHILE      shift, and go to state 39
    FOR        shift, and go to state 40
    CONTINUE   shift, and go to state 41
    TYPEOF     shift, and go to state 42

    SCOL      reduce using rule 48 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 255
    stmt             go to state 44
    declaration      go to state 45
    return_stmt      go to state 46
    data_type        go to state 47
    expr             go to state 48
    postfix_expr     go to state 49
    unary_expr       go to state 50
    primary_expr     go to state 51
    unary_op         go to state 52
    const            go to state 53
    assign           go to state 54
    if_stmt          go to state 55
    switch_stmt      go to state 56
    while_loop_stmt  go to state 57
    for_loop_stmt    go to state 58
    func_call        go to state 59


State 255

  102 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list • CF $@13 elif_stmt

    CF  shift, and go to state 256


State 256

  102 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF • $@13 elif_stmt

    $default  reduce using rule 101 ($@13)

    $@13  go to state 257


State 257

  102 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 • elif_stmt

    ELIF  shift, and go to state 232

    $default  reduce using rule 103 (elif_stmt)

    elif_stmt  go to state 258


State 258

  102 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt •

    $default  reduce using rule 102 (elif_stmt)
